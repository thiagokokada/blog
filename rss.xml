<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>kokada&#39;s blog</title>
    <link></link>
    <description># dd if=/dev/urandom of=/dev/brain0</description>
    <item>
      <title>Quick bits: Go automatically downloads a newer toolchain if needed</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-08-19/01-quick-bits-go-automatically-downloads-a-newer-toolchain-if-needed.md</link>
      <description>&lt;p&gt;I am using&#xA;&lt;a href=&#34;https://github.com/elliotchance/orderedmap/&#34;&gt;elliotchance/orderedmap&lt;/a&gt; as my&#xA;choice of ordered maps (since Go &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-08-17/01-an-unordered-list-of-things-i-miss-in-go.md&#34;&gt;doesn&#39;t have&#xA;one&lt;/a&gt; in standard&#xA;library yet). I recently did a&#xA;&lt;a href=&#34;https://github.com/elliotchance/orderedmap/pull/41&#34;&gt;PR&lt;/a&gt; to implement Go 1.23&#xA;iterators, because I find them neat, however I was avoiding to use it in the&#xA;code that generates this &lt;a href=&#34;https://github.com/thiagokokada/blog&#34;&gt;blog&lt;/a&gt; since Go&#xA;1.23 was just released and is still not the default Go in&#xA;&lt;a href=&#34;https://github.com/NixOS/nixpkgs&#34;&gt;nixpkgs&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I decided that I would create a&#xA;&lt;a href=&#34;https://github.com/thiagokokada/blog/pull/2&#34;&gt;branch&lt;/a&gt; and leave there for a few&#xA;months, until I decided to try to run the code locally and got this:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go: downloading go1.23.0 (darwin/arm64)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Neat. And before you ask, yes, the compiled binary works perfectly:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./blog &amp;gt; README.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./blog -rss &amp;gt; rss.xml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So how does this work? Take a look at the documentation in the official &lt;a href=&#34;https://tip.golang.org/doc/toolchain&#34;&gt;Golang&#xA;page&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Starting in Go 1.21, the Go distribution consists of a go command and a&#xA;bundled Go toolchain, which is the standard library as well as the compiler,&#xA;assembler, and other tools. The go command can use its bundled Go toolchain&#xA;as well as other versions that it finds in the local PATH or downloads as&#xA;needed.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;There are a bunch of rules here that I am not going to enter in detail (I&#xA;recommend you to read the official documentation), but a quick summary:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go will download a toolchain when either &lt;code&gt;go&lt;/code&gt; or &lt;code&gt;toolchain&lt;/code&gt; lines &lt;code&gt;go.mod&lt;/code&gt;&#xA;is set to a Go version higher than your current &lt;code&gt;go&lt;/code&gt; binary&#xA;&lt;ul&gt;&#xA;&lt;li&gt;But only if your &lt;code&gt;go&lt;/code&gt; binary is at least version 1.21, since this is the&#xA;version that introduces this behavior&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;You can force a specific toolchain with &lt;code&gt;GOTOOLCHAIN&lt;/code&gt; environment setting,&#xA;e.g.: &lt;code&gt;GOTOOLCHAIN=1.23&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The default value for &lt;code&gt;GOTOOLCHAIN&lt;/code&gt; is &lt;code&gt;auto&lt;/code&gt;, that basically has the&#xA;behavior described in this post&lt;/li&gt;&#xA;&lt;li&gt;You can also set to &lt;code&gt;local&lt;/code&gt; to always use the current &lt;code&gt;go&lt;/code&gt; binary, or the&#xA;previous behaviour pre-1.21 Go&lt;/li&gt;&#xA;&lt;li&gt;There is also &lt;code&gt;&amp;lt;name&amp;gt;+auto&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; options, that can be seen in the&#xA;docs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;The downloaded toolchains go to whatever your &lt;code&gt;GOPATH&lt;/code&gt; is, inside&#xA;&lt;code&gt;golang.org/toolchain&lt;/code&gt; module, and version &lt;code&gt;v0.0.1-goVERSION.GOOS-GOARCH&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;By the way, this only works well because Go binaries are static, one of the&#xA;things that make the language &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-29/02-go-a-reasonable-good-language.md&#34;&gt;reasonable&#xA;good&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;While I don&#39;t like a program downloading random binaries from the internet, I&#xA;like what Go is doing here. It makes the whole bootstrapping process for a Go&#xA;project much easier: as long as you have a reasonable up-to-date &lt;code&gt;go&lt;/code&gt; binary in&#xA;your &lt;code&gt;PATH&lt;/code&gt;, you should be ready to go (pun intended). And Go modules are&#xA;already reasonable secure, ensuring that each module have a proper checksum. As&#xA;long as nobody else can publish modules in &lt;code&gt;golang.org/toolchain&lt;/code&gt; namespace I&#xA;can&#39;t see much of a security issue here, but I am not a security expert.&lt;/p&gt;&#xA;&lt;p&gt;But if you don&#39;t like this behavior, you can always disable it by setting&#xA;&lt;code&gt;GOTOOLCHAIN=local&lt;/code&gt;. And just do not forget to set this in your&#xA;&lt;a href=&#34;https://brandur.org/fragments/go-version-matrix&#34;&gt;CI&lt;/a&gt;, unless you don&#39;t care&#xA;about Go versions.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-08-19/01-quick-bits-go-automatically-downloads-a-newer-toolchain-if-needed.md</guid>
      <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>An unordered list of things I miss in Go</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-08-17/01-an-unordered-list-of-things-i-miss-in-go.md</link>
      <description>&lt;p&gt;I like Go. I think it is a &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-29/02-go-a-reasonable-good-language.md&#34;&gt;reasonable good&#xA;language&lt;/a&gt;, and has some good&#xA;qualities that makes up for its flaws. However, this doesn&#39;t mean I think the&#xA;language couldn&#39;t be better, far from it.&lt;/p&gt;&#xA;&lt;p&gt;This blog post is a list of things that I miss from Go from other languages.&#xA;Some of the things here could probably be implemented soon, some other would&#xA;probably need a major revision of the language. The list is unordered, because&#xA;this makes it easier for me to update in the future if I found something else,&#xA;but also because I don&#39;t want to think too hard about giving each point here a&#xA;rank.&lt;/p&gt;&#xA;&lt;p&gt;With all above, let&#39;s start.&lt;/p&gt;&#xA;&lt;h2&gt;Ordered maps in standard library&lt;/h2&gt;&#xA;&lt;p&gt;When I first learned about&#xA;&lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#typesmapping&#34;&gt;dictionaries&lt;/a&gt; in&#xA;Python it quickly became one of my favorite data structures ever. They&#39;re&#xA;extremely versatile, and most modern programming languages have something&#xA;similar in its standard library. Go isn&#39;t different, it has&#xA;&lt;a href=&#34;https://go.dev/blog/maps&#34;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;, that is Go implementation of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table&#34;&gt;hash&#xA;table&lt;/a&gt;. However &lt;code&gt;map&lt;/code&gt; in Go are&#xA;quirky, for example:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;baz&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qux&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quux&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;println(&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go run ./test.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;baz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qux&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quux&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ go run ./test.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;baz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qux&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quux&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ go run ./test.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qux&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quux&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;baz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, I don&#39;t expect any hash table implementation to keep the order of the&#xA;elements, but Go actually &lt;a href=&#34;https://victoriametrics.com/blog/go-map/&#34;&gt;randomise each map&#xA;instance&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;But here’s the deal, while the hash function used for maps in Go is&#xA;consistent across all maps with &lt;strong&gt;the same key type&lt;/strong&gt;, the &lt;code&gt;seed&lt;/code&gt; used by&#xA;that hash function is different for each map instance. So, when you create a&#xA;new map, Go generates a random seed just for that map.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;While I understand the reason for this (i.e.: to avoid developers relying in a&#xA;specific iteration order), I still find it weird, and I think this is something&#xA;unique for Go. This decision means that even if you don&#39;t care about a specific&#xA;order, you will still need to sort the map before doing something else if you&#xA;want reproducibility, something that I care a lot.&lt;/p&gt;&#xA;&lt;p&gt;The fix for this? Go could offer an ordered map implementation inside the&#xA;standard library. An ordered map ensure that the iteration order of the map is&#xA;the same as the insertion order (that is, by the way, a powerful property that&#xA;allow maps to be used in other contexts, not just my pet peeve above).&lt;/p&gt;&#xA;&lt;p&gt;Python actually does this for any dictionaries since &lt;a href=&#34;https://stackoverflow.com/a/39980744&#34;&gt;Python&#xA;3.6&lt;/a&gt;, but it offered an&#xA;&lt;a href=&#34;https://docs.python.org/3/library/collections.html#collections.OrderedDict&#34;&gt;OrderedDict&lt;/a&gt;&#xA;before it (and &lt;code&gt;OrderedDict&lt;/code&gt; still has some methods that normal &lt;code&gt;dict&lt;/code&gt; doesn&#39;t,&#xA;that maybe useful in specific cases).&lt;/p&gt;&#xA;&lt;p&gt;Before generics it would be impossible to have a type-safe API for such data&#xA;structure without introducing a new data type in the language (like &lt;code&gt;slices&lt;/code&gt;),&#xA;but now Go has generics so it is not an issue anymore. The other issue is that&#xA;you would be forced to iterate manually in this new data structure, but thanks&#xA;to the new &lt;a href=&#34;https://tip.golang.org/doc/go1.23#language&#34;&gt;&lt;code&gt;range-over-func&lt;/code&gt;&lt;/a&gt; in&#xA;Go 1.23, it means we can iterate in an ordered map as a library almost exactly&#xA;like we can do as a &lt;code&gt;map&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;orderedmap&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;orderedmap&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;]()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;baz&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Iterator&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        println(&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Order always will be: foo, bar, baz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, of course the lack of Ordered Map in the standard library can be filled&#xA;with third party implementations, e.g.: I am using this&#xA;&lt;a href=&#34;https://github.com/elliotchance/orderedmap&#34;&gt;one&lt;/a&gt; in one of my projects. But&#xA;being in standard library reduces the friction: if there was some&#xA;implementation in standard library, I would generally prefer it unless I have&#xA;some specific needs. However when the standard library doesn&#39;t offer what I&#xA;need, I need to find it myself a suitable library, and this ends up taking time&#xA;since generally there are lots of alternatives.&lt;/p&gt;&#xA;&lt;h2&gt;Keyword and default arguments for functions&lt;/h2&gt;&#xA;&lt;p&gt;Something that comes straight from Python that I miss sometimes in Go is that&#xA;you can do things like this when declaring a function:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hello(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Foo&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;normal&amp;#34; function call&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hello(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bar&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# calling with keyword arguments&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hello() &lt;span style=&#34;color:#75715e&#34;&gt;# calling with default arguments&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python hello.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello, Foo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello, Bar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello, World&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The lack of default arguments especially affects even some of the API decisions&#xA;for Go standard library, for example, &lt;code&gt;string.Replace&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;func Replace(s, old, new string, n int) string&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Replace returns a copy of the string s with the first n non-overlapping&#xA;instances of old replaced by new. If old is empty, it matches at the&#xA;beginning of the string and after each UTF-8 sequence, yielding up to k+1&#xA;replacements for a k-rune string. If n &amp;lt; 0, there is no limit on the number&#xA;of replacements.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;If Go had default arguments, &lt;code&gt;Replace&lt;/code&gt; could have e.g.: &lt;code&gt;func Replace(s, old, new string, n int = -1)&lt;/code&gt; signature, that would mean we don&#39;t need&#xA;&lt;code&gt;strings.ReplaceAll&lt;/code&gt; (since this is basically what this function does, call&#xA;&lt;code&gt;strings.Replace(s, old, new, -1)&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;h2&gt;Nullability (or nillability)&lt;/h2&gt;&#xA;&lt;p&gt;I talked I little about this in &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-29/02-go-a-reasonable-good-language.md&#34;&gt;my previous post about&#xA;Go&lt;/a&gt;, but I want to expand&#xA;here.&lt;/p&gt;&#xA;&lt;p&gt;First, I don&#39;t think the language needs to support the generic solution for&#xA;nullability, that would be either having proper Union or Sum types. Kotlin&#xA;AFAIK doesn&#39;t support neither, but my 2 years experience with Kotlin showed&#xA;that just having nullable types already helped a lot in ensuring type safety.&lt;/p&gt;&#xA;&lt;p&gt;Second, I do feel that Go has less issues with &lt;code&gt;nil&lt;/code&gt; values, than say, Java,&#xA;because its decision of using zero values instead of &lt;code&gt;nil&lt;/code&gt; in many cases. So&#xA;for example, a string can never be &lt;code&gt;nil&lt;/code&gt;, however a string pointer can be. This&#xA;means that this is fine:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// do something with s&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// s maybe nil here, better check first&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Still, I get more &lt;code&gt;panic&lt;/code&gt; for &lt;code&gt;nil&lt;/code&gt; pointer deference than I get in other&#xA;languages that offer nullables (heck, even Python with&#xA;&lt;a href=&#34;https://www.mypy-lang.org/&#34;&gt;&lt;code&gt;mypy&lt;/code&gt;&lt;/a&gt; is safer).&lt;/p&gt;&#xA;&lt;p&gt;Sadly this is the change in this post that is more likely to need a completely&#xA;new revision of the language.&#xA;&lt;a href=&#34;https://github.com/golang/go/issues/49202&#34;&gt;nillability&lt;/a&gt; was proposed before,&#xA;but it is really unlikely it can be done without breaking backwards&#xA;compatibility.&lt;/p&gt;&#xA;&lt;p&gt;It could be done the Java way by adding a &lt;code&gt;nullable&lt;/code&gt; type to the standard&#xA;library (&lt;a href=&#34;https://jcp.org/en/jsr/detail?id=305&#34;&gt;JSR305&lt;/a&gt;), but the fact that&#xA;&lt;a href=&#34;https://stackoverflow.com/questions/2289694/what-is-the-status-of-jsr-305&#34;&gt;JSR305 is considerd&#xA;dead&lt;/a&gt;&#xA;by many shows how difficult it is to do something like this without a major&#xA;change in the language. Dart is the only language that I know that &lt;a href=&#34;https://dart.dev/null-safety/understanding-null-safety&#34;&gt;did this&#xA;successfully&lt;/a&gt;, but&#xA;definitely it was not without its pains. And the fact that most people that&#xA;program in Dart probably does because of Flutter (that eventually required&#xA;newer versions with null-safety) is not a good sign.&lt;/p&gt;&#xA;&lt;h2&gt;Lambdas&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;Added in 2024-08-18&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Go is a surprising good language for some functional code, thanks to having&#xA;first class functions and closures. Sadly the syntax doesn&#39;t help, since the&#xA;only way you can use anonymous functions in Go is using &lt;code&gt;func&lt;/code&gt;. Especially if&#xA;the types are complex, this can result in some convoluted code. Take the&#xA;example from the &lt;a href=&#34;https://go.dev/wiki/RangefuncExperiment&#34;&gt;&lt;code&gt;range-over-func&lt;/code&gt;&#xA;experiment&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slices&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Backward&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;yield&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If Go had a syntax for lambdas, especially if we could elide the types, this&#xA;could be simplified a lot:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slices&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Backward&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;yield&lt;/span&gt;) =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;yield&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or even something like this would already help, no special syntax but allowing&#xA;the types to be elided in an unnamed function:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slices&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Backward&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;yield&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;yield&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This feature I am still somewhat hopeful that may become a reality in some&#xA;future version of the language, since they didn&#39;t close the&#xA;&lt;a href=&#34;https://github.com/golang/go/issues/21498&#34;&gt;issue&lt;/a&gt; yet, and the discussion&#xA;about the possibility of this feature is still ongoing.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-08-17/01-an-unordered-list-of-things-i-miss-in-go.md</guid>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Quick bits: NixOS&#39;s boot.kernelPackages is a attrset</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-08-15/01-quick-bits-nixoss-boot-kernelpackages-is-a-attrset.md</link>
      <description>&lt;p&gt;I don&#39;t know if this is just something that got me by surprise or not, but&#xA;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/blob/bb16119a4a7639ebbc91ad0f516b324b0f7c9b68/nixos/modules/system/boot/kernel.nix#L40-L71&#34;&gt;&lt;code&gt;boot.kernelPackages&lt;/code&gt;&lt;/a&gt;&#xA;option does not receive a derivation like most other packages, but instead&#xA;receives a function and returns an attribute set with all packages. Here is the&#xA;documentation:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;This option allows you to override the Linux kernel used by NixOS. Since&#xA;things like external kernel module packages are tied to the kernel you’re&#xA;using, it also overrides those. This option is a function that takes Nixpkgs&#xA;as an argument (as a convenience), and returns an attribute set containing at&#xA;the very least an attribute kernel. Additional attributes may be needed&#xA;depending on your configuration. For instance, if you use the NVIDIA X&#xA;driver, then it also needs to contain an attribute &lt;code&gt;nvidia_x11&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;The kernel package itself is referenced by the&#xA;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/blob/bb16119a4a7639ebbc91ad0f516b324b0f7c9b68/nixos/modules/system/boot/kernel.nix#L331-L332&#34;&gt;&lt;code&gt;kernel&lt;/code&gt;&lt;/a&gt;&#xA;derivation inside this attribute set:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; nixosConfigurations.sankyuu-nixos.config.boot.kernelPackages.kernel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;«derivation /nix/store/5zyjvf3qgfk52qmgxh36l4dkr9lf100x-linux-6.10.3.drv»&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The reason for this is because it ensure that things like modules are built&#xA;with the same kernel version you are booting.&lt;/p&gt;&#xA;&lt;p&gt;However one less obvious consequence about this is that if you want packages&#xA;that come from &lt;code&gt;linuxPackages&lt;/code&gt;, say for example&#xA;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/blob/nixos-unstable/pkgs/os-specific/linux/cpupower/default.nix&#34;&gt;&lt;code&gt;cpupower&lt;/code&gt;&lt;/a&gt;&#xA;or&#xA;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/blob/nixos-unstable/pkgs/os-specific/linux/cpupower/default.nix&#34;&gt;&lt;code&gt;turbostat&lt;/code&gt;&lt;/a&gt;,&#xA;it is better to do:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ config&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  environment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;systemPackages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;boot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kernelPackages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cpupower&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;boot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kernelPackages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;turbostat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Instead of:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ pkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  environment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;systemPackages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    linuxPackages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cpupower&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    linuxPackages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;turbostat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, I used the later for a long time and never had issues. But technically&#xA;those packages depends in a specific kernel version for a reason, so getting&#xA;them from &lt;code&gt;config.boot.kernelPackages&lt;/code&gt; reduces the chance of you having some&#xA;compatibility issue in the future.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-08-15/01-quick-bits-nixoss-boot-kernelpackages-is-a-attrset.md</guid>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Abusing Makefiles for fun and profit</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-08-13/01-abusing-makefiles-for-fun-and-profit.md</link>
      <description>&lt;p&gt;If you are following this blog for a while, it should be no surprise that most&#xA;of the workflow in this blog is &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-29/01-quick-bits-why-you-should-automate-everything.md&#34;&gt;automated using&#xA;Go&lt;/a&gt;. I&#xA;basically write Markdown files with some special rules inside the&#xA;&lt;a href=&#34;https://github.com/thiagokokada/blog&#34;&gt;repository&lt;/a&gt;, commit and push it. In&#xA;seconds, the CI (currently &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/4e3f25485c6682f3e066b219df2290934bc0d256/.github/workflows/go.yml&#34;&gt;GitHub&#xA;Actions&lt;/a&gt;)&#xA;will take the latest commit, generate some files (since I use the &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-26/02-using-github-as-a-bad-blog-platform.md&#34;&gt;repository&#xA;itself&lt;/a&gt; as a backup&#xA;blog) and publish to the &lt;a href=&#34;https://kokada.capivaras.dev/&#34;&gt;capivaras.dev&#xA;website&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Now, considering how much about &lt;a href=&#34;https://nixos.org/&#34;&gt;Nix&lt;/a&gt; I talk in this blog,&#xA;it should be a surprise that the workflow above has &lt;strong&gt;zero&lt;/strong&gt; Nix code inside&#xA;it. I am not saying this blog will never have it, but I am only going to add if&#xA;this is necessary, for example if I start using a tool to build this blog that&#xA;I generally don&#39;t expect it to be installed by the machine I am currently&#xA;using. Go is an exception of this rule since it is relatively straightfoward to&#xA;install (just download the &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;binary&lt;/a&gt;) and because&#xA;its &lt;a href=&#34;https://go.dev/doc/go1compat&#34;&gt;stability guarantee&lt;/a&gt; means (hopefully) no&#xA;breakage. But most other things I consider moving targets, and I wouldn&#39;t be&#xA;comfortable to use unless I have Nix to ensure reproducibility.&lt;/p&gt;&#xA;&lt;p&gt;This is why the other tool that this blog (ab)uses during its workflow is&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)&#34;&gt;&lt;code&gt;Make&lt;/code&gt;&lt;/a&gt;, one of the oldest&#xA;build automation tool that exist. It is basically available in any *nix (do not&#xA;confuse with &lt;a href=&#34;https://nixos.org/&#34;&gt;Nix&lt;/a&gt;) system, from most Linux distros to&#xA;macOS, by default. So it is the tool I choose to automatise some tasks in this&#xA;blog, even if I consider writing a &lt;code&gt;Makefile&lt;/code&gt; (the domain-specific language&#xA;that &lt;code&gt;Make&lt;/code&gt; uses) kind of a lost, dark art.&lt;/p&gt;&#xA;&lt;p&gt;To be clear, the idea of this post is not to be a &lt;code&gt;Makefile&lt;/code&gt; tutorial. I will&#xA;explain some basic concepts, but if you want an actual tutorial a good one can&#xA;be found &lt;a href=&#34;https://makefiletutorial.com/&#34;&gt;here&lt;/a&gt;. Also, while I am using &lt;code&gt;Make&lt;/code&gt;&#xA;thanks to the reasons above, you can use many other tools for a similar&#xA;objective, like &lt;a href=&#34;https://github.com/casey/just&#34;&gt;Justfiles&lt;/a&gt;,&#xA;&lt;a href=&#34;https://taskfile.dev/&#34;&gt;Taskfiles&lt;/a&gt; (sadly it uses&#xA;&lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-31/01-generating-yaml-files-with-nix.md&#34;&gt;YAML&lt;/a&gt;), or even a small&#xA;script written in any language you want. The reason that I am writing this post&#xA;is why you should do it, not how.&lt;/p&gt;&#xA;&lt;p&gt;A quick recap on how this blog works: inside the&#xA;&lt;a href=&#34;https://github.com/thiagokokada/blog&#34;&gt;repository&lt;/a&gt;, a post is basically a&#xA;Markdown post following the directory structure below&#xA;(&lt;a href=&#34;https://github.com/thiagokokada/blog/tree/894a388c61ca3a38dfc9d4cbe88dc684fd964bb7&#34;&gt;permalink&lt;/a&gt;&#xA;for the current version of this blog):&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;...&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── 2024-08-07&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 01-quick-bits-is-crostini-a-microvm.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── 02-meta-are-quick-bits-really-quick.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── 2024-08-11&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── 01-building-static-binaries-in-nix.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── 2024-08-12&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 01-things-i-dont-like-in-my-chromebook-duet-3.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── Screenshot_2024-08-12_20.50.42.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── 2024-08-13&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 01-abusing-makefiles-for-fun-and-profit.md &amp;lt;-- this file&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── .github&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── workflows&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       └── go.yml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── .gitignore&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── go.mod&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── go.sum&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── LICENSE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── link_rewriter.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── Makefile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── mataroa.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── README.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── rss.xml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── .scripts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── gen-post.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So I just create a new Markdown file following the&#xA;&lt;code&gt;YYYY-MM-DD/XX-title-slug.md&lt;/code&gt; format. It &lt;strong&gt;must&lt;/strong&gt; start with a &lt;code&gt;h1&lt;/code&gt; header,&#xA;that will be automatically extract to be used as the post title, but otherwise&#xA;there is no other formatting rules. It is a highly optionated structure, but&#xA;the nice thing about being optionated is that we can extract lots of&#xA;information just from how the files are organised in the filesystem.&lt;/p&gt;&#xA;&lt;p&gt;Most of the magic that converts those Markdown files to actual blog posts are&#xA;in the Go files that you can see above: &lt;code&gt;blog.go&lt;/code&gt; is the main logic that walks&#xA;in the repository and extracts the necessary information, &lt;code&gt;mataroa.go&lt;/code&gt; is&#xA;responsible for the &lt;a href=&#34;https://capivaras.dev/&#34;&gt;capivaras.dev&lt;/a&gt; integration (that&#xA;uses &lt;a href=&#34;https://mataroa.blog/&#34;&gt;Mataroa&lt;/a&gt; platform), while &lt;code&gt;link_rewriter.go&lt;/code&gt; is&#xA;responsible to do some transformations in the Markdown files before posting.&lt;/p&gt;&#xA;&lt;p&gt;While I could manage everything by just using &lt;code&gt;go&lt;/code&gt; CLI and a few other *nix&#xA;commands, to make it easier to manager everything I have the following&#xA;&lt;a href=&#34;https://github.com/thiagokokada/blog/blob/527466a2a7c8baae532281bff5db3f0695f018cb/Makefile&#34;&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MARKDOWN &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;wildcard ./**/*.md&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; all&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; README.md rss.xml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blog&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; *.go go.*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;go build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;README.md&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; blog &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;MARKDOWN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;./blog &amp;gt; README.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rss.xml&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; blog &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;MARKDOWN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;./blog -rss &amp;gt; rss.xml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; publish&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;publish&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; blog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;./blog -publish&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DAY &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;shell date&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_PARSED_DAY &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;shell date &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+%Y-%m-%d&amp;#39;&lt;/span&gt; -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(DAY)&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; day&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;day&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;mkdir -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(_PARSED_DAY)&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TITLE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;error TITLE is not defined&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; post&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; blog day&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;./.scripts/gen-post.sh &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(_PARSED_DAY)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(TITLE)&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FILE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;error FILE is not defined&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; draft&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;draft&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;cd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(dir $(FILE))&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(notdir $(FILE))&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.$(notdir $(FILE))&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; undraft&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;undraft&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;cd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(dir $(FILE))&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(notdir $(FILE))&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(patsubst .%,%,$(notdir $(FILE)))&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; clean&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;rm -rf blog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For those unfamiliar with &lt;code&gt;Makefile&lt;/code&gt;, a quick explanation on how it works from&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)#Makefile&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Each rule begins with a &lt;em&gt;dependency line&lt;/em&gt; which consists of the rule&#39;s target&#xA;name followed by a colon (:) and optionally a list of targets on which the&#xA;rule&#39;s target depends, its prerequisites.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;So if we look for example at the &lt;code&gt;blog&lt;/code&gt; binary, the dependencies are all the&#xA;&lt;code&gt;.go&lt;/code&gt; files and Go module files like &lt;code&gt;go.mod&lt;/code&gt; and &lt;code&gt;go.sum&lt;/code&gt;. We can make the&#xA;&lt;code&gt;blog&lt;/code&gt; binary by running:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make blog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One nice thing about &lt;code&gt;Makefile&lt;/code&gt; is that they track if any of the source files&#xA;has a newer timestamp than the target file, and only trigger the build again if&#xA;there are changes, for example:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make blog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make: &amp;#39;blog&amp;#39; is up to date.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ touch blog.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ make blog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But sometimes this property is undesirable. In those cases we can declare a&#xA;target as &lt;code&gt;.PHONY&lt;/code&gt;, that basically instructs &lt;code&gt;Makefile&lt;/code&gt; to always make the&#xA;target. One classic example is &lt;code&gt;clean&lt;/code&gt; target, that removes build artifacts:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make clean&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf blog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ make clean&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf blog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By the way, it is better to declare a target as &lt;code&gt;.PHONY&lt;/code&gt; than declaring&#xA;dependencies incorrectly, especially in languages that has fast build times&#xA;like e.g.: Go. The worst thing that can happen is something not being rebuild&#xA;when it needs to. So my recomendation if you are writing your first &lt;code&gt;Makefile&lt;/code&gt;&#xA;is to just declare everything as &lt;code&gt;.PHONY&lt;/code&gt;. You can always improve it later.&lt;/p&gt;&#xA;&lt;p&gt;One last basic concept that I want to explain about &lt;code&gt;Makefile&lt;/code&gt; is the default&#xA;target: it is the target that is run if you just run &lt;code&gt;make&lt;/code&gt; without arguments&#xA;inside the directory that contains a &lt;code&gt;Makefile&lt;/code&gt;. The default target is&#xA;generally the first target in the &lt;code&gt;Makefile&lt;/code&gt;. It is common to have an &lt;code&gt;all&lt;/code&gt;&#xA;target (that is also marked as &lt;code&gt;.PHONY&lt;/code&gt;) that has as dependencies all the&#xA;targets that you want to build by default. In this particular case I declare&#xA;the &lt;code&gt;README.md&lt;/code&gt; and &lt;code&gt;rss.xml&lt;/code&gt; files to be build by default, and they themselves&#xA;depends in &lt;code&gt;blog&lt;/code&gt; binary being build. So once I run &lt;code&gt;make&lt;/code&gt; you get as result:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./blog &amp;gt; README.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./blog -rss &amp;gt; rss.xml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And this result above highlights the first reason I think you should have a&#xA;&lt;code&gt;Makefile&lt;/code&gt; or something similar in your projects: you don&#39;t need to remember&#xA;the exactly steps that you need to get things working. If I see one project of&#xA;mine having a &lt;code&gt;Makefile&lt;/code&gt;, I can be reasonably confident that I can get it&#xA;working by just running &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;But now let&#39;s focus in the other targets that I have in the &lt;code&gt;Makefile&lt;/code&gt; that are&#xA;not related to the build process but are there to help me manage my blog posts.&#xA;Remember the rules I explained above? Maybe not, but it should be no problem,&#xA;because:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ make post TITLE=&amp;quot;My new blog post&amp;quot;&#xA;mkdir -p &amp;quot;2024-08-13&amp;quot;&#xA;./.scripts/gen-post.sh &amp;quot;2024-08-13&amp;quot; &amp;quot;My new blog post&amp;quot;&#xA;Creating file: 2024-08-13/02-my-new-blog-post.md&#xA;&#xA;$ cat 2024-08-13/02-my-new-blog-post.md&#xA;# My new blog post&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This command, &lt;code&gt;make post&lt;/code&gt;, is responsible for:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Create a new directory for today, if it doesn&#39;t exist&lt;/li&gt;&#xA;&lt;li&gt;Run the&#xA;&lt;a href=&#34;https://github.com/thiagokokada/blog/blob/6a3b06970729f7650e5bee5fb0e1f9f2541ffea8/.scripts/gen-post.sh&#34;&gt;&lt;code&gt;gen-post.sh&lt;/code&gt;&lt;/a&gt;&#xA;script, that:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Enumerates all posts from the day, so we can number the new post correctly&#xA;&lt;ul&gt;&#xA;&lt;li&gt;We already had this post planned for 2024-08-13, so the new post is 02&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Slugify the title, so we can create each Markdown file with the correct&#xA;filename&lt;/li&gt;&#xA;&lt;li&gt;Creates a new Markdown file with the title as a &lt;code&gt;h1&lt;/code&gt; header&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The steps above may or may not seen trivial, and for a while I was doing them&#xA;manually. But not having to think what is the current date or if I already&#xA;posted that day or what is the slug is for the title make (pun intended) my&#xA;like much easier.&lt;/p&gt;&#xA;&lt;p&gt;Yes, the code is ugly. The way variables works in &lt;code&gt;Make&lt;/code&gt; is that you can&#xA;declare then inside the &lt;code&gt;Makefile&lt;/code&gt;, but they can be overwritten in the terminal&#xA;if you pass them. I used this to allow &lt;code&gt;make post&lt;/code&gt; to also work for future&#xA;posts:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make post TITLE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Another new blog post&amp;#34;&lt;/span&gt; DAY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2024-12-12&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p &amp;#34;2024-12-12&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./.scripts/gen-post.sh &amp;#34;2024-12-12&amp;#34; &amp;#34;Another new blog post&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Creating file: 2024-12-12/01-another-new-blog-post.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So in the above case, &lt;code&gt;DAY&lt;/code&gt; is filled with the value passed in the terminal&#xA;instead of default (that would be the current day), and &lt;code&gt;_PARSED_DAY&lt;/code&gt; is the&#xA;day we use to actually create the directory. We can actually pass any date&#xA;format recognised by&#xA;&lt;a href=&#34;https://www.gnu.org/software/coreutils/manual/html_node/Examples-of-date.html&#34;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt;,&#xA;not just &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I have 2 other phony targets that I want to talk, &lt;code&gt;draft&lt;/code&gt; and &lt;code&gt;undraft&lt;/code&gt;. They&#xA;expect a &lt;code&gt;FILE&lt;/code&gt; to be passed, and I use them to either hide or unhide a file:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make draft FILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2024-12-12/01-another-new-blog-post.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv &amp;#34;2024-12-12/01-another-new-blog-post.md&amp;#34; &amp;#34;2024-12-12/.01-another-new-blog-post.md&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ make undraft FILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2024-12-12/.01-another-new-blog-post.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv &amp;#34;2024-12-12/.01-another-new-blog-post.md&amp;#34; &amp;#34;2024-12-12/01-another-new-blog-post.md&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Why? Because hidden files are &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/894a388c61ca3a38dfc9d4cbe88dc684fd964bb7/blog.go#L101-L104&#34;&gt;explicit&#xA;ignored&lt;/a&gt;&#xA;during my directory parser to mean they&#39;re a draft post and not ready to be&#xA;published. And the reason I created those targets is because I was tired of&#xA;trying to hide or unhide a file manually.&lt;/p&gt;&#xA;&lt;p&gt;So that&#39;s it, for the same reason you &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-29/01-quick-bits-why-you-should-automate-everything.md&#34;&gt;should probably automate&#xA;everything&lt;/a&gt;,&#xA;you also need to have some way to automate your tasks. &lt;code&gt;Makefile&lt;/code&gt; is one way to&#xA;do it, maybe not the best way to do it, but it works and it is available&#xA;anywhere.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-08-13/01-abusing-makefiles-for-fun-and-profit.md</guid>
      <pubDate>Tue, 13 Aug 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Things I don&#39;t like in my Chromebook Duet 3</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-08-12/01-things-i-dont-like-in-my-chromebook-duet-3.md</link>
      <description>&lt;p&gt;So this is kind of a continuation from my &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-08-05/01-my-favorite-device-is-a-chromebook.md&#34;&gt;previous&#xA;post&lt;/a&gt; talking why my&#xA;favorite device is a Chromebook. In this post I want to talk about what makes&#xA;me this device unhappy, and comment about things that if changed would make it&#xA;a much better device.&lt;/p&gt;&#xA;&lt;p&gt;But before talking about the negative aspects, let me talk about a positive&#xA;aspect that I just briefly talked in the previous post: the screen. It is a&#xA;HiDPI screen (2000x1200 resolution in 10.95&#39;&#39;), that is unexpected bright (400&#xA;nits according to the&#xA;&lt;a href=&#34;https://www.lenovo.com/us/en/p/laptops/lenovo/lenovo-edu-chromebooks/ideapad-duet-3-chromebook-11-inch,-qlc/len101i0034&#34;&gt;specs&lt;/a&gt;).&#xA;It is difficult to find laptops at the same price with a screen that good. At&#xA;10.95&#39;&#39; in its default resolution I find it too small (like 1250x750), but I&#xA;find the font size acceptable at 115% scale (1087x652). Yes, it result in a&#xA;small workspace, but this is not a big issue for what I do in this device. It&#xA;is also only 60Hz, but I thought I would miss high refresh rate more than I&#xA;actually miss in this device.&lt;/p&gt;&#xA;&lt;p&gt;Update: I forgot to say one thing about the screen: it scratches really easy. I&#xA;got my screen scratched after the first day of usage, and considering the price&#xA;I don&#39;t think the screen has a hardened glass. I bought a cheap glass screen&#xA;protector and this did the trick though, even hiding the previous scratch, and&#xA;I have zero issues with the screen now.&lt;/p&gt;&#xA;&lt;p&gt;Now the first aspect that I don&#39;t like: the speakers. They sound tiny and even&#xA;at maximum volume it is not really loud. The speakers is the only reason why I&#xA;still keep my &lt;a href=&#34;https://www.gsmarena.com/xiaomi_pad_5-11042.php&#34;&gt;Xiaomi Pad 5&lt;/a&gt;,&#xA;because I like to watch animes/videos before sleep and having good speakers is&#xA;a must.&lt;/p&gt;&#xA;&lt;p&gt;The keyboard has that issue that I mentioned in the previous post: sometimes&#xA;the key get stuck, and I get duplicated characters. But it also has some minor&#xA;issues that I didn&#39;t talked about: the first one is the UK layout that has some&#xA;extra keys that I have no use for, but this also makes the keys that I use&#xA;smaller. Very much a &amp;quot;me&amp;quot; problem, since if I had got a US version I wouldn&#39;t&#xA;have those issues, but an issue nonetheless that gets worse considering how&#xA;small the keyboard is. I am actually suprised how fast I can type considering&#xA;how many issues this keyboard has, so maybe this is a testament that this&#xA;keyboard is not actually that bad.&lt;/p&gt;&#xA;&lt;p&gt;The other keyboard issue is a problem that affects all Chromebooks: its custom&#xA;layout. Google replaced a few keys like Fn keys with shortcuts and replaced the&#xA;Caps Lock with a&#xA;&lt;a href=&#34;https://chromeunboxed.com/chromebook-launcher-now-everything-button&#34;&gt;&amp;quot;Everything&amp;quot;&lt;/a&gt;&#xA;key (that is similar to the Windows Key), while removing Windows Key from its&#xA;place. I actually have less issue with this than I initially though: I don&#39;t&#xA;care too much about Fn keys (except when using IntelliJ, but that is something&#xA;that I only use at &lt;code&gt;$CURRENT_JOB&lt;/code&gt;), and ChromeOS is surprisingly powerful in&#xA;its customisation, allowing you to swap key functionality. I remap Everything&#xA;key with Esc, and Esc for the Everything key, and I can get productive in my&#xA;&lt;code&gt;neovim&lt;/code&gt; setup.&lt;/p&gt;&#xA;&lt;p&gt;And finally, let me talk more about the performance: yes, it is bad, but&#xA;bearable once you get used to. The issue is both the CPU and IO. While the CPU,&#xA;a &lt;a href=&#34;https://www.qualcomm.com/products/mobile/snapdragon/laptops-and-tablets/snapdragon-mobile-compute-platforms/snapdragon-7c-gen-2-compute-platform&#34;&gt;Snapdragon 7c Gen&#xA;2&lt;/a&gt;&#xA;is octa-core, it has only 2 high performance CPU cores vs 6 low performance&#xA;ones (2xARM Cortex A76 vs 6xARM Cortex A55). If it was something like 4x4, it&#xA;would be much better. The fact that the cores are old doesn&#39;t help either.&lt;/p&gt;&#xA;&lt;p&gt;But the worst part is the IO. Not only it uses a eMMC module, it is slow:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/thiagokokada/blog/raw/main/2024-08-12/Screenshot_2024-08-12_20.50.42.png&#34; alt=&#34;CPDT Benchmark results from Chromebook Duet 3.&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;I don&#39;t know how much more expensive it would be to put a&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Universal_Flash_Storage&#34;&gt;UFS&lt;/a&gt; instead of eMMC in&#xA;this device, but this is probably the choice that would most increase&#xA;performance in this device, especially considering how aggressive Chromebooks&#xA;use (z)swap.&lt;/p&gt;&#xA;&lt;p&gt;Update 2: I forgot to talk about the fact that the exterior of the device is&#xA;covered in cloth. I thought I would hate this at first, but nowadays I kind&#xA;like it. And it is also nice that it will never get scratched, I don&#39;t care too&#xA;much about the exterior of this device and it is the only device that I have at&#xA;home that doesn&#39;t have additional protection (except the screen protector&#xA;mentioned above).&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-08-12/01-things-i-dont-like-in-my-chromebook-duet-3.md</guid>
      <pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Building static binaries in Nix</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-08-11/01-building-static-binaries-in-nix.md</link>
      <description>&lt;p&gt;I recently had laser eye surgery for my near-sightedness, and while evaluating&#xA;if I could have the surgery I discovered that I was suffering from dry eyes.&#xA;Thanks to this, my ophthalmologist recommended that every 20 minutes while&#xA;using screens, I look somewhere 20 feet away for 20 seconds, a technique known&#xA;as &lt;a href=&#34;https://www.healthline.com/health/eye-health/20-20-20-rule&#34;&gt;20-20-20 rule&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I had issues following this rule because I never remembered to do the pauses. I&#xA;initially tried to setup an alarm, but this became annoying, so I decided to&#xA;try to find a program. I found&#xA;&lt;a href=&#34;https://tonyh4156.github.io/20-20-20.github.io/&#34;&gt;this&lt;/a&gt; one for macOS that&#xA;worked fine, but it bothered me that it was compiled for x86_64 while I was&#xA;using a M1 MacBook Pro at the time, and also I needed something that worked in&#xA;Linux.&lt;/p&gt;&#xA;&lt;p&gt;Since I never found a good multi-platform alternative, I decided to write my&#xA;own. This became&#xA;&lt;a href=&#34;https://github.com/thiagokokada/twenty-twenty-twenty/&#34;&gt;twenty-twenty-twenty&lt;/a&gt;,&#xA;the first &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-29/02-go-a-reasonable-good-language.md&#34;&gt;Go&lt;/a&gt; program that I&#xA;ever wrote. I wrote it in Go because I wanted to learn the language, but also&#xA;because Go made it easy to build static binaries. And the first&#xA;version I could build static binaries without issues because I was using&#xA;&lt;a href=&#34;https://github.com/gen2brain/beeep&#34;&gt;beeep&lt;/a&gt;, that uses pure Go code in all&#xA;supported platforms. However, it also meant that the notifications in macOS&#xA;looked ugly, since it used&#xA;&lt;a href=&#34;https://github.com/gen2brain/beeep/blob/master/beep_darwin.go#L20&#34;&gt;osascript&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I wanted better integration with macOS, so this meant switching libraries.&#xA;After searching for a while, the&#xA;&lt;a href=&#34;https://pkg.go.dev/gioui.org/x/notify&#34;&gt;notify&lt;/a&gt; library from&#xA;&lt;a href=&#34;https://gioui.org/&#34;&gt;GioUI&lt;/a&gt; is the one that seemed to work better. It&#xA;implements notification in macOS using its native framework, so it works much&#xA;better, but sadly it meant losing static binaries because it depends in CGO.&lt;/p&gt;&#xA;&lt;p&gt;Not a big loss initially, because I am only depending in Foundation inside&#xA;macOS (that should always be available), and in Linux I could still statically&#xA;compile. However I eventually added more features like sound&#xA;(via &lt;a href=&#34;https://github.com/gopxl/beep&#34;&gt;beep&lt;/a&gt;) and tray icon (via&#xA;&lt;a href=&#34;https://github.com/fyne-io/systray&#34;&gt;systray&lt;/a&gt;), that meant I needed CGO in both&#xA;macOS and Linux.&lt;/p&gt;&#xA;&lt;p&gt;Losing static binaries in Linux is a much bigger deal, since Linux is a moving&#xA;target. The general recommendation for building CGO binaries statically is&#xA;using&#xA;&lt;a href=&#34;https://eli.thegreenplace.net/2024/building-static-binaries-with-go-on-linux/&#34;&gt;musl&lt;/a&gt;,&#xA;but this also means building all dependencies that we need using musl (e.g.:&#xA;&lt;a href=&#34;https://github.com/ebitengine/oto?tab=readme-ov-file#linux&#34;&gt;&lt;code&gt;ALSA&lt;/code&gt;&lt;/a&gt; for&#xA;[beep/oto]). This generally means pain, but Nix makes it easy.&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s start by creating a &lt;a href=&#34;https://github.com/thiagokokada/twenty-twenty-twenty/blob/main/twenty-twenty-twenty.nix&#34;&gt;Nix&#xA;file&lt;/a&gt;&#xA;that builds our Go module (simplified below for brevity):&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ lib&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; stdenv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; alsa-lib&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; buildGoModule&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; pkg-config&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; withStatic &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buildGoModule {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;twenty-twenty-twenty&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cleanSource &lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  vendorHash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sha256-NzDhpJRogIfL2IYoqAUHoPh/ZdNnvnhEQ+kn8A+ZyBw=&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CGO_ENABLED &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nativeBuildInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;optionals (stdenv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hostPlatform&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isLinux) [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pkg-config&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buildInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;optionals (stdenv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hostPlatform&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isLinux) [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alsa-lib&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ldflags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-X=main.version=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;version&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-w&amp;#34;&lt;/span&gt; ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;optionals withStatic [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-linkmode external&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;-extldflags &amp;#34;-static&amp;#34;&amp;#39;&amp;#39;&lt;/span&gt; ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  meta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; lib; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alerts every 20 minutes to look something at 20 feet away for 20 seconds&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    homepage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/thiagokokada/twenty-twenty-twenty&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    license &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; licenses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mainProgram &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;twenty-twenty-twenty&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And we can build it with the following &lt;code&gt;flake.nix&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;twenty-twenty-twenty&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nixpkgs/nixpkgs-unstable&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flake-compat&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:edolstra/flake-compat&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { self&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      supportedSystems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64-linux&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aarch64-linux&amp;#34;&lt;/span&gt; ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Helper function to generate an attrset &amp;#39;{ x86_64-linux = f &amp;#34;x86_64-linux&amp;#34;; ... }&amp;#39;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      forAllSystems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;genAttrs supportedSystems;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Nixpkgs instantiated for supported system types.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      nixpkgsFor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; forAllSystems (system: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nixpkgs { &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt; system; });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      packages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; forAllSystems (system:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nixpkgsFor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;system&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;system&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;twenty-twenty-twenty;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          twenty-twenty-twenty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;callPackage &lt;span style=&#34;color:#e6db74&#34;&gt;./twenty-twenty-twenty.nix&lt;/span&gt; { };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          twenty-twenty-twenty-static &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pkgsStatic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;callPackage &lt;span style=&#34;color:#e6db74&#34;&gt;./twenty-twenty-twenty.nix&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            withStatic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I think this shows how powerful Nix is: the only difference between the normal&#xA;build and a static build the usage of &lt;code&gt;pkgs.pkgsStatic&lt;/code&gt; instead of &lt;code&gt;pkgs&lt;/code&gt;. This&#xA;automatically builds all packages statically with &lt;code&gt;musl&lt;/code&gt;. Also we need pass&#xA;some &lt;a href=&#34;https://honnef.co/articles/statically-compiled-go-programs-always-even-with-cgo-using-musl/&#34;&gt;extra&#xA;flags&lt;/a&gt;&#xA;to the Go compiler (i.e.: &lt;code&gt;-linkmode external -extldflags &amp;quot;-static&amp;quot;&lt;/code&gt;), but this&#xA;is a requirement from Go.&lt;/p&gt;&#xA;&lt;p&gt;So, does it work? Let&#39;s test:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build .#twenty-twenty-twenty-static&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ file result/bin/twenty-twenty-twenty&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result/bin/twenty-twenty-twenty: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ ./result/bin/twenty-twenty-twenty&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ALSA lib pcm.c:2712:(snd_pcm_open_conf) Either /nix/store/dhn51w2km4fyf9ivi00rz03qs8q4mpng-pipewire-1.2.1/lib/alsa-lib/libasound_module_pcm_pipewire.so cannot be opened or _snd_pcm_pipewire_open was not defined inside&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ALSA lib pcm.c:2712:(snd_pcm_open_conf) Either /nix/store/ly9d7llymzjyf6gi1455qzayqipk2kab-pipewire-1.2.1/lib/alsa-lib/libasound_module_pcm_pipewire.so cannot be opened or _snd_pcm_pipewire_open was not defined inside&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ALSA lib pcm.c:2712:(snd_pcm_open_conf) Either /nix/store/dhn51w2km4fyf9ivi00rz03qs8q4mpng-pipewire-1.2.1/lib/alsa-lib/libasound_module_pcm_pipewire.so cannot be opened or _snd_pcm_pipewire_open was not defined inside&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ALSA lib pcm.c:2712:(snd_pcm_open_conf) Either /nix/store/ly9d7llymzjyf6gi1455qzayqipk2kab-pipewire-1.2.1/lib/alsa-lib/libasound_module_pcm_pipewire.so cannot be opened or _snd_pcm_pipewire_open was not defined inside&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ALSA lib pcm.c:2712:(snd_pcm_open_conf) Either /nix/store/dhn51w2km4fyf9ivi00rz03qs8q4mpng-pipewire-1.2.1/lib/alsa-lib/libasound_module_pcm_pipewire.so cannot be opened or _snd_pcm_pipewire_open was not defined inside&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ALSA lib pcm.c:2712:(snd_pcm_open_conf) Either /nix/store/ly9d7llymzjyf6gi1455qzayqipk2kab-pipewire-1.2.1/lib/alsa-lib/libasound_module_pcm_pipewire.so cannot be opened or _snd_pcm_pipewire_open was not defined inside&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2024-08-11T19:26:33+01:00 INFO Running twenty-twenty-twenty every 20.0 minute(s), with 20 second(s) duration and sound set to true&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are some warns and sadly the sound doesn&#39;t work. I think the issue is&#xA;related because of my usage of PipeWire and the binary may work in a pure ALSA&#xA;system, but I don&#39;t have access to one. Maybe adding &lt;code&gt;pipewire&lt;/code&gt; to&#xA;&lt;code&gt;buildInputs&lt;/code&gt; would fix this issue, but I can&#39;t get &lt;code&gt;pipewire&lt;/code&gt; to be compiled&#xA;statically (because of its dependencies). I think this is a good show how easy&#xA;it is to statically compilation is in Nix, but also how complex static binaries&#xA;are to get correctly.&lt;/p&gt;&#xA;&lt;p&gt;Bonus points for&#xA;&lt;a href=&#34;https://nix.dev/tutorials/cross-compilation.html&#34;&gt;cross-compilation&lt;/a&gt;. We can&#xA;easily cross-compile by using &lt;code&gt;pkgsCross&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { self&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      packages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; forAllSystems (system:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nixpkgsFor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;system&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          twenty-twenty-twenty-static-aarch64 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pkgsCross&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aarch64-multiplatform&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pkgsStatic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;callPackage &lt;span style=&#34;color:#e6db74&#34;&gt;./twenty-twenty-twenty.nix&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            withStatic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The idea of &lt;code&gt;pkgsCross&lt;/code&gt; is to select a target platform (e.g.:&#xA;&lt;code&gt;aarch64-multiplatform&lt;/code&gt;) and use it as any other &lt;code&gt;pkgs&lt;/code&gt;. We can even chain&#xA;&lt;code&gt;pkgsStatic&lt;/code&gt; to statically cross compile binaries:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build .#twenty-twenty-twenty-static-aarch64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ file result/bin/twenty-twenty-twenty&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result/bin/twenty-twenty-twenty: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), statically linked, stripped&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-08-11/01-building-static-binaries-in-nix.md</guid>
      <pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Meta: are quick bits really quick?</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-08-07/02-meta-are-quick-bits-really-quick.md</link>
      <description>&lt;p&gt;When I wrote my first &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-27/01-quick-bits-nix-shell-is-cursed.md&#34;&gt;quick&#xA;bits&lt;/a&gt; post in this blog, I&#xA;gave that title prefix without much thought: I knew it was supposed to be a&#xA;quicker post than my previous one, but I never thought too deeply about it. But&#xA;after:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -lah **/*quick-bits*.md | wc -l&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, 4 blog posts starting with the same prefix, I was curious: are those&#xA;quick bits really quick, or at least quicker? Let&#39;s see:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ wc -w **/*.md&#xA; 1107 2024-07-26/01-writing-nixos-tests-for-fun-and-profit.md&#xA; 1220 2024-07-26/02-using-github-as-a-bad-blog-platform.md&#xA;  286 2024-07-27/01-quick-bits-nix-shell-is-cursed.md&#xA;  387 2024-07-29/01-quick-bits-why-you-should-automate-everything.md&#xA; 1060 2024-07-29/02-go-a-reasonable-good-language.md&#xA; 1380 2024-07-30/01-first-impressions-fpgbc.md&#xA; 1238 2024-07-31/01-generating-yaml-files-with-nix.md&#xA; 2308 2024-08-01/01-troubleshooting-zsh-lag-and-solutions-with-nix.md&#xA;  504 2024-08-01/02-quick-bits-realise-nix-symlinks.md&#xA;  834 2024-08-04/01-make-nixd-modules-completion-work-anywhere-with-flakes.md&#xA; 1147 2024-08-05/01-my-favorite-device-is-a-chromebook.md&#xA;  394 2024-08-07/01-quick-bits-is-crostini-a-microvm.md&#xA;  120 README.md&#xA;11985 total&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;While using &lt;code&gt;wc&lt;/code&gt; is probably not the best way to measure word count (especially&#xA;in this blog, since I tend to write lots of code snippets), I think this at&#xA;least it gives me a good insight: yes, quick bits are quicker, and they&#39;re&#xA;basically posts with a soft limit around 500 words. So expect in future this&#xA;limit to be used.&lt;/p&gt;&#xA;&lt;p&gt;By the way, at:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wc -w 2024-08-07/02-meta-are-quick-bits-really-quick.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;220 2024-08-07/02-meta-are-quick-bits-really-quick.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This post is also technically a quick bits post, but &amp;quot;quick bits meta&amp;quot; would be&#xA;too much. And yes, that last block of code is also meta ;).&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-08-07/02-meta-are-quick-bits-really-quick.md</guid>
      <pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Quick bits: is Crostini a micro VM?</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-08-07/01-quick-bits-is-crostini-a-micro-vm.md</link>
      <description>&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: I am not a Virtual Machine specialist, this post is mainly the&#xA;conclusion I got after some searching.&lt;/p&gt;&#xA;&lt;p&gt;Someone asked me in my &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-08-05/01-my-favorite-device-is-a-chromebook.md&#34;&gt;previous&#xA;post&lt;/a&gt; about my Chromebook&#xA;if Crostini could be considered a micro VM. This was a interesting question, so&#xA;I decided to do another post.&lt;/p&gt;&#xA;&lt;p&gt;To start, it is really difficult to get a good definition of what a &amp;quot;micro VM&amp;quot;&#xA;is. &lt;a href=&#34;https://firecracker-microvm.github.io/&#34;&gt;Firecracker&lt;/a&gt; defines itself as a&#xA;micro VM, and describes itself in its website as:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Firecracker is a virtual machine monitor (VMM) that uses the Linux&#xA;Kernel-based Virtual Machine (KVM) to create and manage microVMs. Firecracker&#xA;has a minimalist design. It excludes unnecessary devices and guest&#xA;functionality to reduce the memory footprint and attack surface area of each&#xA;microVM. This improves security, decreases the startup time, and increases&#xA;hardware utilization.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Now looking at Crostini, its heart is a VMM called&#xA;&lt;a href=&#34;https://crosvm.dev/&#34;&gt;crosvm&lt;/a&gt;. It is described in its&#xA;&lt;a href=&#34;https://chromium.googlesource.com/chromiumos/platform/crosvm/+/HEAD/README.md&#34;&gt;README&lt;/a&gt;&#xA;as:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;crosvm is a virtual machine monitor (VMM) based on Linux’s KVM hypervisor,&#xA;with a focus on simplicity, security, and speed. crosvm is intended to run&#xA;Linux guests, originally as a security boundary for running native&#xA;applications on the ChromeOS platform. Compared to QEMU, crosvm doesn’t&#xA;emulate architectures or real hardware, instead concentrating on&#xA;paravirtualized devices, such as the virtio standard.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Similar descriptions right? Actually Firecracker website says it &amp;quot;started from&#xA;Chromium OS&#39;s Virtual Machine Monitor, crosvm, an open source VMM written in&#xA;Rust&amp;quot;. So I would say it is safe to say crosvm itself is a micro VM.&lt;/p&gt;&#xA;&lt;p&gt;But&#xA;&lt;a href=&#34;https://www.chromium.org/chromium-os/developer-library/guides/containers/containers-and-vms/&#34;&gt;Crostini&lt;/a&gt;&#xA;itself is a combination of virtualization AND containerization. Basically&#xA;inside the VM it runs a Linux kernel and &lt;a href=&#34;https://linuxcontainers.org/&#34;&gt;LXC&lt;/a&gt;,&#xA;that can start arbitrary containers inside it. From the Crostini documentation&#xA;this choice seems to be to keep startup times down, and also to increase&#xA;security (e.g.: in case of a security issue inside the container).&lt;/p&gt;&#xA;&lt;p&gt;This is definitely an interesting choice, since containers allow the overhead&#xA;of each distro that you run inside Crostini to be low, and the main VM itself&#xA;(called&#xA;&lt;a href=&#34;https://chromium.googlesource.com/chromiumos/overlays/board-overlays/+/HEAD/project-termina/&#34;&gt;Termina&lt;/a&gt;)&#xA;should have low overhead too thanks to crosvm.&lt;/p&gt;&#xA;&lt;p&gt;By the way, if you want to learn more how &amp;quot;devices&amp;quot; works inside a micro VM&#xA;like crosvm, I recommend &lt;a href=&#34;https://prilik.com/blog/post/crosvm-paravirt/&#34;&gt;this blog&#xA;post&lt;/a&gt; talking about&#xA;paravirtualized devices in crosvm.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-08-07/01-quick-bits-is-crostini-a-micro-vm.md</guid>
      <pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>My favorite device is a Chromebook</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-08-05/01-my-favorite-device-is-a-chromebook.md</link>
      <description>&lt;p&gt;Most of the posts in this blog (including this one) and most of I would call&#xA;&amp;quot;personal computing&amp;quot; that I do nowadays is mostly done in one of the most&#xA;unremarkable devices that I own: a cheap &lt;a href=&#34;https://www.lenovo.com/us/en/p/laptops/lenovo/lenovo-edu-chromebooks/ideapad-duet-3-chromebook-11-inch,-qlc/len101i0034&#34;&gt;Chromebook Duet&#xA;3&lt;/a&gt;,&#xA;that I bought for around EUR300. I was thinking why, because it is woefully&#xA;underpowered: a &lt;a href=&#34;https://www.anandtech.com/show/16696/qualcomm-announces-snapdragon-7c-gen-2-entrylevel-pc-and-chromebook-refresh&#34;&gt;Snapdragon 7c Gen&#xA;2&lt;/a&gt;,&#xA;a CPU that was already considered slow 3 years ago, coupled with an eMMC for&#xA;storage, that is not much faster than a HDD. At least I have the 8GB RAM&#xA;version instead of the 4GB one.&lt;/p&gt;&#xA;&lt;p&gt;It is a hybrid device, one that can be used as either a tablet or laptop, but&#xA;it is compromised experience in both cases: as a tablet, it lacks the better&#xA;touch optimised interface from iOS or Android; as a laptop, you have to depend&#xA;on the stand to adjust the screen, and the detachable keyboard is worse than&#xA;any laptop I have ever owned: getting keys stucked and characters being&#xA;duplicated as a result is a common occurence. It is not so bad that I can&#39;t get&#xA;things done though. About the trackpad: its biggest quality is that I never&#xA;feel the need to use the touchscreen in laptop mode, that is to say that it is&#xA;acceptable. Just crank up the pointer speed in ChromeOS settings, otherwise you&#xA;never get anywhere since the trackpad is so small. There is also an active&#xA;stylus, that helped me sometimes when I needed to sign something but otherwise&#xA;I can&#39;t comment too much.&lt;/p&gt;&#xA;&lt;p&gt;But I really love this device. It is generally the only device that I bring in&#xA;trips nowadays, because while it is compromised it works well enough: I can use&#xA;to consume media in tablet mode (the fact that ChromeOS supports Android apps&#xA;is a plus in those cases), browse the web and even do Linux stuff (more about&#xA;this later). The fact that it is small (the size remembers me of a&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Netbook&#34;&gt;netbook&lt;/a&gt;), lightweight (~1KG, including&#xA;the keyboard), has a good screen (that is bright and HiDPI) and good battery&#xA;life (I don&#39;t have numbers but I almost never worry about it) is what makes&#xA;this device the perfect companion to trips.&lt;/p&gt;&#xA;&lt;p&gt;Also, it has 2 USB-C ports and supports DisplayPort alt-mode, so it means you&#xA;can charge it, connect to a external display and peripherals, all at the same&#xA;time. Sadly, the maximum output resolution I got was 1080p (2560x1080),&#xA;although some people at Reddit &lt;a href=&#34;https://www.reddit.com/r/chromeos/comments/zh27tg/comment/izku724/?utm_source=share&amp;amp;utm_medium=web3x&amp;amp;utm_name=web3xcss&amp;amp;utm_term=1&amp;amp;utm_content=share_button&#34;&gt;seems to have&#xA;success&lt;/a&gt;&#xA;at 1440p, and the specs suggests it supports 4k. It may be my Dell S3423DWC&#xA;monitor being wonky, the fact that it is Ultrawide or the cable, who knows? I&#xA;even tried to change the monitor to &amp;quot;High Resolution&amp;quot; mode in settings, but to&#xA;no avail.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; looking at the &lt;a href=&#34;https://www.qualcomm.com/content/dam/qcomm-martech/dm-assets/documents/prod_brief_qcom_sd7c_gen2.pdf&#34;&gt;product&#xA;brief&lt;/a&gt;&#xA;for Snapdragon 7c Gen 2, it seems it supports up to QHD@60Hz (1440p) for the&#xA;external display, and not 4k. This explains why it doesn&#39;t work at maximum&#xA;resolution in my Dell S3423DWC, since while it is 1440p it is Ultrawide, so the&#xA;resolution is bigger than QHD (3440x1440 vs 2560x1440).&lt;/p&gt;&#xA;&lt;p&gt;ChromeOS is also really interesting nowadays. To start, it is designed from the&#xA;ground up to be a &lt;a href=&#34;https://support.google.com/chromebook/answer/3438631&#34;&gt;secure computing&#xA;environment&lt;/a&gt;, probably&#xA;the most secure OS for consumers right now. Being a Chrome-first OS makes it a&#xA;compromised experience, for example, it is the only device that I use Chrome as&#xA;my main browser (since I personally prefer Firefox). But having a OS that boots&#xA;fast is great: I never worry about OS updates because I know the device will be&#xA;ready in seconds after a reboot. And the whole desktop experience inside the&#xA;ChromeOS desktop is good, having shortcuts for many operations so you can get&#xA;things done fast, and support for virtual desktops (ChromeOS call it &amp;quot;desks&amp;quot;)&#xA;means you can organise your windows as much as you want.&lt;/p&gt;&#xA;&lt;p&gt;And what I think makes ChromeOS really powerful is&#xA;&lt;a href=&#34;https://chromeos.dev/en/linux&#34;&gt;Crostini&lt;/a&gt;, a full Linux VM that you can run&#xA;inside ChromeOS. It runs Debian (it seems you can &lt;a href=&#34;https://www.reddit.com/r/Crostini/wiki/howto/run-other-distros/&#34;&gt;run other&#xA;distros&lt;/a&gt;&#xA;though) with a deep integration with ChromeOS, so you can run even graphical&#xA;programs without issues (including OpenGL!):&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/thiagokokada/blog/raw/main/2024-08-05/Screenshot_2024-08-05_21.22.29.png&#34; alt=&#34;Fastfetch inside Crostini with gitk running side-by-side.&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/thiagokokada/blog/raw/main/2024-08-05/Screenshot_2024-08-05_21.39.58.png&#34; alt=&#34;Running glxgears inside Crostini.&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;This is all thanks to&#xA;&lt;a href=&#34;https://chromium.googlesource.com/chromiumos/platform2/+/HEAD/vm_tools/sommelier/README.md&#34;&gt;Sommelier&lt;/a&gt;,&#xA;a nested Wayland compositor that runs inside Crostini and allow both Wayland&#xA;and X11 applications to be forwarded to ChromeOS. The integration is so good&#xA;that I can run Firefox inside Crostini and works well enough, but sadly Firefox&#xA;is too slow in this device (I am not sure if the issue is ChromeOS or Firefox,&#xA;but I suspect the later since Google does some optimisation per device).&lt;/p&gt;&#xA;&lt;p&gt;One interesting tidbit about the OpenGL situation in this device: this seems to&#xA;be the first Chromebook to ship with open source drivers, thanks to Freedreno.&#xA;There is &lt;a href=&#34;https://www.youtube.com/watch?v=8mnjSmN03VM&#34;&gt;this&lt;/a&gt; very interesting&#xA;presentation done by Rob Clark in XDC 2021, that I recommended anyone&#xA;interested in free drivers to watch (the reference design of Duet 3 is&#xA;&lt;a href=&#34;https://chromeunboxed.com/chromebook-tablet-snapdragon-7c-homestar-coachz-strongbad&#34;&gt;Strongbad&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;The Crostini integration is probably the best VM integration with Linux I ever&#xA;saw in an OS: you can manage files inside the VM, share directories between the&#xA;OS and VM, copy and paste works between the two, GUI applications installed&#xA;inside the VM appear in the ChromeOS menu, memory allocation inside the VM is&#xA;transparent, etc. Even the themes for Linux GUI applications are customised to&#xA;match ChromeOS. It is unironically one of the best Linux desktop experiences I&#xA;ever had.&lt;/p&gt;&#xA;&lt;p&gt;Of course I am using Nix, but since the Crostini integration depends on some&#xA;services being configured and installed, I decided to run Nix inside Debian&#xA;instead of NixOS and run &lt;a href=&#34;https://nix-community.github.io/home-manager/index.xhtml#sec-install-standalone&#34;&gt;Home-Manager&#xA;standalone&lt;/a&gt;.&#xA;I recommend checking the official &lt;a href=&#34;https://wiki.nixos.org/wiki/Installing_Nix_on_Crostini&#34;&gt;NixOS Wiki article about&#xA;Crostini&lt;/a&gt;, that details&#xA;how to register applications in ChromeOS (so desktop applications appear in&#xA;menu) and use &lt;a href=&#34;https://github.com/nix-community/nixGL&#34;&gt;nixGL&lt;/a&gt; to make OpenGL&#xA;applications work.&lt;/p&gt;&#xA;&lt;p&gt;Like I said at the start of the article, the device is woefully slow thanks to&#xA;its CPU and eMMC. It does mean that, for example, activating my Home-Manager&#xA;configuration takes a while (around 1 minute, vs a few seconds in my laptop).&#xA;But it is much faster than say,&#xA;&lt;a href=&#34;https://github.com/nix-community/nix-on-droid-app&#34;&gt;nix-on-droid&lt;/a&gt;, that the&#xA;last time I tried in a much more powerful device (&lt;a href=&#34;https://www.gsmarena.com/xiaomi_pad_5-11042.php&#34;&gt;Xiaomi Pad&#xA;5&lt;/a&gt;), took 30 minutes until I&#xA;just decided to cancel the operation. Having a proper VM instead of&#xA;&lt;a href=&#34;https://wiki.termux.com/wiki/PRoot&#34;&gt;proot&lt;/a&gt; makes all the difference here.&lt;/p&gt;&#xA;&lt;p&gt;I can even do some light programming here: using my&#xA;&lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-08-01/01-troubleshoting-zsh-lag-and-solutions-with-nix.md&#34;&gt;ZSH&lt;/a&gt; and&#xA;neovim configuration (including LSP for coding) is reasonable fast. For&#xA;example, I did most of the code that &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-29/01-quick-bits-why-you-should-automate-everything.md&#34;&gt;powers this&#xA;blog&lt;/a&gt; using&#xA;this Chromebook. If I need more power, I can use the &lt;a href=&#34;https://tailscale.com/kb/1267/install-chromebook&#34;&gt;Tailscale app for&#xA;Android&lt;/a&gt; to connect to any&#xA;other of my hosts via SSH. Yes, the Tailscale app works in Crostini, sadly&#xA;without MagicDNS, so you need to use the internal Tailscale IPs instead.&lt;/p&gt;&#xA;&lt;p&gt;Until Google decides to give us a proper VM or user namespaces in Android or&#xA;release a hybrid Chromebook device with better specs, this small Chromebook&#xA;will probably stay as my travel companion, and is one of my favorite devices.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-08-05/01-my-favorite-device-is-a-chromebook.md</guid>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Make nixd module completion to work anywhere (with Flakes)</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-08-04/01-make-nixd-module-completion-to-work-anywhere-with-flakes.md</link>
      <description>&lt;p&gt;If you want the TL;DR, go to the bottom of the post (search for &amp;quot;final&#xA;result&amp;quot;).&lt;/p&gt;&#xA;&lt;p&gt;I recently switched from &lt;a href=&#34;https://github.com/oxalica/nil&#34;&gt;nil&lt;/a&gt; to&#xA;&lt;a href=&#34;https://github.com/nix-community/nixd&#34;&gt;nixd&lt;/a&gt; as my LSP of choice for Nix. I&#xA;was curious in &lt;code&gt;nixd&lt;/code&gt; for a long time since the fact that it can eval Nix code&#xA;means it can offer much more powerful completion than the &lt;code&gt;nil&lt;/code&gt;&#39;s static&#xA;analysis, however it used to be difficult to setup. Nowadays it is much easier,&#xA;basically doing the right thing as long as you have &lt;code&gt;NIX_PATH&lt;/code&gt; setup, and you&#xA;get both package and NixOS modules completion.&lt;/p&gt;&#xA;&lt;p&gt;Getting Home-Manager modules though needs some setup. The recommended way to&#xA;setup accordingly to the &lt;a href=&#34;https://github.com/nix-community/nixd/blob/fe202307eaf7e89c4366ed927af761482a6065c8/nixd/docs/configuration.md&#34;&gt;official&#xA;documentation&lt;/a&gt;&#xA;is to use the following for Flake based configurations (using neovim&#xA;configuration here, but it should be easy to adapt to other editors):&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nixpkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import &amp;lt;nixpkgs&amp;gt; { }&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(builtins.getFlake (&amp;#34;git+file://&amp;#34; + toString ./.)).nixosConfigurations.miku-nixos.options&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    home_manager &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(builtins.getFlake (&amp;#34;git+file://&amp;#34; + toString ./.)).homeConfigurations.home-linux.options&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;-- ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This works, but it should be pretty clear the limitations of using &lt;code&gt;./.&lt;/code&gt;: this&#xA;will only work if you open your editor in your &lt;a href=&#34;https://github.com/thiagokokada/nix-configs&#34;&gt;Nix configuration&#xA;repository&lt;/a&gt;. For any other&#xA;repository, &lt;code&gt;nixosConfigurations.miku-nixos&lt;/code&gt; or &lt;code&gt;homeConfigurations.home-linux&lt;/code&gt;&#xA;will not exist and the completion will not work.&lt;/p&gt;&#xA;&lt;p&gt;It may look like this is easy to fix if you have&#xA;&lt;a href=&#34;https://nixos.org/manual/nixos/unstable/options#opt-_module.args&#34;&gt;&lt;code&gt;specialArgs&lt;/code&gt;&lt;/a&gt;&#xA;(or &lt;code&gt;extraSpecialArgs&lt;/code&gt; in Home-Manager) set to have your&#xA;Flakes inputs, but:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# By the way, ${self} does not exist in the Flake output by default, you need&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# to explicit add `inherit self` to your outputs:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://discourse.nixos.org/t/who-is-self-in-flake-outputs/31859/4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; (builtins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getFlake &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git+file://&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;self&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixosConfigurations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;miku-linux&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;options&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt; while calling the &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;getFlake&amp;#39; builtin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         at &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;«&lt;/span&gt;string&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;»&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;|&lt;/span&gt; (builtins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getFlake &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git+file://&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;self&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;|&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;^&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt; while evaluating the argument passed to builtins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getFlake&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       error: the string &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;git+file:///nix/store/avr1lcmznj8ghynh5vj1kakgfdf0zrxx-source&amp;#39;&lt;/span&gt; is not allowed to refer to a store path (such as &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;avr1lcmznj8ghynh5vj1kakgfdf0zrxx-source&amp;#39;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, it was worth a try. Another option would be to:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(builtins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getFlake &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:thiagokokada/nix-configs&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixosConfigurations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;miku-linux&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;options&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Or even something like this&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# However, using ${rev} means this wouldn&amp;#39;t work in dirty Flake repos, since&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ${rev} is not set in those cases&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(builtins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getFlake &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:thiagokokada/nix-configs/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;rev&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixosConfigurations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;miku-linux&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;options&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But while it works, it is slow, because it needs network to evaluate (and it is&#xA;impure, since there is no &lt;code&gt;flake.lock&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;p&gt;The default configuration for &lt;code&gt;nixd&lt;/code&gt; makes NixOS completion work even outside&#xA;of my configuration repo, and it is fast. How? I decided to take a look at the&#xA;&lt;code&gt;nixd&lt;/code&gt; source code and found&#xA;&lt;a href=&#34;https://github.com/nix-community/nixd/blob/d938026c55c7c36a6e79afd9627459160b4924ed/nixd/lib/Controller/LifeTime.cpp#L33C11-L35C76&#34;&gt;this&lt;/a&gt;&#xA;(formatted here for legibility):&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;nixpkgs&amp;gt;&lt;/span&gt; { };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evalModules {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    modules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;nixpkgs/nixos/modules/module-list.nix&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ({ &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }: { nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hostPlatform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builtins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currentSystem; })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;options&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Interesting, so they&#39;re manually loading the modules using &lt;code&gt;evalModules&lt;/code&gt;. As I&#xA;said above, it depends in &lt;code&gt;NIX_PATH&lt;/code&gt; being correctly set. Can we fix this to&#xA;use our Flake inputs instead? After some tries in the Nix REPL, I got the&#xA;following:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixpkgs&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; { };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evalModules {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    modules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixpkgs&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/nixos/modules/module-list.nix&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ({ &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }: { nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hostPlatform &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builtins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currentSystem; })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;options&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we can adapt this to the neovim configuration:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(let pkgs = import &amp;#34;${inputs.nixpkgs}&amp;#34; { }; in (pkgs.lib.evalModules { modules =  (import &amp;#34;${inputs.nixpkgs}/nixos/modules/module-list.nix&amp;#34;) ++ [ ({...}: { nixpkgs.hostPlatform = builtins.currentSystem;} ) ] ; })).options&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This was easy. But the main issue is Home-Manager. How can we fix it? I needed&#xA;to take a look at the Home-Manager &lt;a href=&#34;https://github.com/nix-community/home-manager/blob/master/docs/default.nix#L161-L169&#34;&gt;source&#xA;code&lt;/a&gt;&#xA;to find the answer:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixpkgs&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; { };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lib &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;home-manager&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/modules/lib/stdlib-extended.nix&amp;#34;&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evalModules {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    modules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;home-manager&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/modules/modules.nix&amp;#34;&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt; lib pkgs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      check &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;options&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The interesting part is: Home-Manager has its own extension of the module&#xA;system (including &lt;code&gt;evalModules&lt;/code&gt;). This includes e.g.: extra types used in&#xA;Home-Manager only. Also, we need to disable &lt;code&gt;checks&lt;/code&gt;, otherwise we will hit&#xA;some validations (e.g.: missing &lt;code&gt;stateVersion&lt;/code&gt;). I am not sure if this causes&#xA;any issue for module completion yet, I may set it in the future.&lt;/p&gt;&#xA;&lt;p&gt;And for the final result:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nixpkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import &amp;#34;${flake.inputs.nixpkgs}&amp;#34; { }&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(let pkgs = import &amp;#34;${inputs.nixpkgs}&amp;#34; { }; in (pkgs.lib.evalModules { modules =  (import &amp;#34;${inputs.nixpkgs}/nixos/modules/module-list.nix&amp;#34;) ++ [ ({...}: { nixpkgs.hostPlatform = builtins.currentSystem;} ) ] ; })).options&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    home_manager &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(let pkgs = import &amp;#34;${inputs.nixpkgs}&amp;#34; { }; lib = import &amp;#34;${inputs.home-manager}/modules/lib/stdlib-extended.nix&amp;#34; pkgs.lib; in (lib.evalModules { modules =  (import &amp;#34;${inputs.home-manager}/modules/modules.nix&amp;#34;) { inherit lib pkgs; check = false; }; })).options&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yes, it is quite a mouthful, but it makes module completion work in any&#xA;repository, as long as you&#39;re using Flakes. And it is fast, since it doesn&#39;t&#xA;need any network access. Since we are already here, let&#39;s define &lt;code&gt;nixpkgs&lt;/code&gt; to&#xA;not depend in the &lt;code&gt;NIX_PATH&lt;/code&gt; being set too.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-08-04/01-make-nixd-module-completion-to-work-anywhere-with-flakes.md</guid>
      <pubDate>Sun, 04 Aug 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Quick bits: realise Nix symlinks</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-08-01/02-quick-bits-realise-nix-symlinks.md</link>
      <description>&lt;p&gt;When you are using Nix, especially with&#xA;&lt;a href=&#34;https://github.com/nix-community/home-manager/&#34;&gt;Home-Manager&lt;/a&gt;, there are times&#xA;when you want to test something or maybe debug some issue in your&#xA;configuration. Those times it would be really convenient if you could avoid a&#xA;rebuild of your Home-Manager configuration, since this takes time until&#xA;evaluation and activation.&lt;/p&gt;&#xA;&lt;p&gt;For those times I have this small script in my Nix configuration called&#xA;&lt;code&gt;realise-symlinks&lt;/code&gt;, that is defined as:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ pkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  realise-symlink &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writeShellApplication {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;realise-symlink&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    runtimeInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [ coreutils ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      for file in &amp;#34;$@&amp;#34;; do&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        if [[ -L &amp;#34;$file&amp;#34; ]]; then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          if [[ -d &amp;#34;$file&amp;#34; ]]; then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            tmpdir=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;&amp;#39;$&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{file}.tmp&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            mkdir -p &amp;#34;$tmpdir&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            cp --verbose --recursive &amp;#34;$file&amp;#34;/* &amp;#34;$tmpdir&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            unlink &amp;#34;$file&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            mv &amp;#34;$tmpdir&amp;#34; &amp;#34;$file&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            chmod --changes --recursive +w &amp;#34;$file&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            cp --verbose --remove-destination &amp;#34;$(readlink &amp;#34;$file&amp;#34;)&amp;#34; &amp;#34;$file&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            chmod --changes +w &amp;#34;$file&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          fi&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;gt;&amp;amp;2 echo &amp;#34;Not a symlink: $file&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          exit 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        fi&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      done&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#39;&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  home&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;packages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ realise-symlink ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The idea of this script is that you can call it against a symlink against Nix&#xA;store and it will realise, e.g.: convert to an &amp;quot;actual&amp;quot; file, e.g.:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -lah .zshrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx 1 thiagoko users 69 Aug  1 00:10 .zshrc -&amp;gt; /nix/store/glz018yyh0qfqc9lywx1yhr7c3l96lv7-home-manager-files/.zshrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ realise-symlink .zshrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;removed &amp;#39;.zshrc&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#39;/nix/store/glz018yyh0qfqc9lywx1yhr7c3l96lv7-home-manager-files/.zshrc&amp;#39; -&amp;gt; &amp;#39;.zshrc&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mode of &amp;#39;.zshrc&amp;#39; changed from 0444 (r--r--r--) to 0644 (rw-r--r--)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ ls -lah .zshrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- 1 thiagoko users 5.8K Aug  1 00:16 .zshrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It also add write permissions to the resulting file, to make it easier to edit.&#xA;By the way, it also works with directories:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -lah zim-completion&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx 1 thiagoko users 90 Aug  1 00:10 zim-completion -&amp;gt; /nix/store/glz018yyh0qfqc9lywx1yhr7c3l96lv7-home-manager-files/.zsh/plugins/zim-completion&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ realise-symlink zim-completion&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#39;zim-completion/init.zsh&amp;#39; -&amp;gt; &amp;#39;zim-completion.tmp/init.zsh&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#39;zim-completion/init.zsh.zwc&amp;#39; -&amp;gt; &amp;#39;zim-completion.tmp/init.zsh.zwc&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#39;zim-completion/LICENSE&amp;#39; -&amp;gt; &amp;#39;zim-completion.tmp/LICENSE&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#39;zim-completion/README.md&amp;#39; -&amp;gt; &amp;#39;zim-completion.tmp/README.md&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mode of &amp;#39;zim-completion/init.zsh&amp;#39; changed from 0444 (r--r--r--) to 0644 (rw-r--r--)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mode of &amp;#39;zim-completion/init.zsh.zwc&amp;#39; changed from 0444 (r--r--r--) to 0644 (rw-r--r--)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mode of &amp;#39;zim-completion/LICENSE&amp;#39; changed from 0444 (r--r--r--) to 0644 (rw-r--r--)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mode of &amp;#39;zim-completion/README.md&amp;#39; changed from 0444 (r--r--r--) to 0644 (rw-r--r--)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ ls -lah zim-completion&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;total 28K&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x 1 thiagoko users   72 Aug  1 00:18 .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x 1 thiagoko users  130 Aug  1 00:18 ..&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- 1 thiagoko users 5.3K Aug  1 00:18 init.zsh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- 1 thiagoko users  12K Aug  1 00:18 init.zsh.zwc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- 1 thiagoko users 1.3K Aug  1 00:18 LICENSE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- 1 thiagoko users 2.2K Aug  1 00:18 README.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After you finish whatever you are testing, to return to your configuration you&#xA;can just delete those files and re-run your Home-Manager activation:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ rm -rf .zshrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ sudo systemctl restart home-manager-&amp;lt;user&amp;gt;.service &lt;span style=&#34;color:#75715e&#34;&gt;# or `home-manager switch`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ ls -lah .zshrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx 1 thiagoko users 69 Aug  1 00:20 .zshrc -&amp;gt; /nix/store/glz018yyh0qfqc9lywx1yhr7c3l96lv7-home-manager-files/.zshrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It even works with system files (i.e.: NixOS):&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo realise-symlink /etc/nix/nix.conf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[sudo] password for thiagoko:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;removed &amp;#39;nix.conf&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#39;/etc/static/nix/nix.conf&amp;#39; -&amp;gt; &amp;#39;nix.conf&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mode of &amp;#39;nix.conf&amp;#39; changed from 0444 (r--r--r--) to 0644 (rw-r--r--)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But I never needed for this case since it is more rare to me to experiment with&#xA;OS level configuration.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-08-01/02-quick-bits-realise-nix-symlinks.md</guid>
      <pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Troubleshooting: ZSH lag and solutions with Nix</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-08-01/01-troubleshoting-zsh-lag-and-solutions-with-nix.md</link>
      <description>&lt;p&gt;Inspired by this &lt;a href=&#34;https://lock.cmpxchg8b.com/slowterm.html&#34;&gt;blog post from&#xA;Tavis&lt;/a&gt;, I decided to document my own&#xA;recent journey of reducing terminal (ZSH) lag startup. This post is way less&#xA;interesting than the one from Tavis that uses a debugger to patch applications&#xA;on the fly, but should still be interesting for some. And it also shows how&#xA;powerful Nix can be for some things.&lt;/p&gt;&#xA;&lt;p&gt;For context, I have basically 3 systems where I interact with terminal&#xA;frequently:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.notebookcheck.net/Lenovo-ThinkPad-P14s-Gen-1-Laptop-Review-AMD-workstation-sans-dedicated-GPU.528746.0.html&#34;&gt;Thinkpad P14s Gen 1&lt;/a&gt;&#xA;running NixOS, with a reasonable fast CPU (&lt;a href=&#34;https://www.notebookcheck.net/AMD-Ryzen-7-PRO-4750U-Processor-Benchmarks-and-Specs.464396.0.html&#34;&gt;AMD Ryzen 7 PRO&#xA;4750U&lt;/a&gt;)&#xA;and disk (NVMe)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://everymac.com/systems/apple/macbook_pro/specs/macbook-pro-m1-pro-10-core-cpu-16-core-gpu-16-2021-specs.html&#34;&gt;MacBook&#xA;Pro&lt;/a&gt;&#xA;with a really fast CPU (M1 Pro) and disk, but of course running macOS, being&#xA;phased-out since this is a job owned machine and I am changing jobs right&#xA;now, but should be replaced with another one soon™&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://chromeunboxed.com/lenovo-chromebook-duet-3-review-perfect-sequel&#34;&gt;Chromebook Duet&#xA;3&lt;/a&gt;&#xA;running ChromeOS, with slow CPU (&lt;a href=&#34;https://www.notebookcheck.net/Qualcomm-Snapdragon-7c-Gen-2-Processor-Benchmarks-and-Specs.554426.0.html&#34;&gt;Snapdragon 7c Gen&#xA;2&lt;/a&gt;)&#xA;and disk (eMMC, really?)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;My experience is similar to Tavis, at around 300ms of startup time I don&#39;t care&#xA;too much, but around 500ms+ is where I start to notice. I never had any issues&#xA;with startup time in NixOS itself (I had issues with macOS before, but it was&#xA;not actually the fault of macOS), but in the Chromebook it was awful: 600ms+&#xA;with &lt;a href=&#34;https://www.instabug.com/blog/understanding-cold-hot-and-warm-app-launch-time&#34;&gt;hot&#xA;start&lt;/a&gt;,&#xA;while cold start it could take multiple seconds.&lt;/p&gt;&#xA;&lt;p&gt;We can check how long ZSH takes to start by using:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ time zsh -ci exit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zsh -ic exit  0.04s user 0.10s system 100% cpu 0.143 total&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;-i&lt;/code&gt; flag here is important, because we are interested in the interactive&#xA;use of ZSH. Without this flag ZSH will ignore your &lt;code&gt;~/.zshrc&lt;/code&gt; file, and the&#xA;results will be meaningless.&lt;/p&gt;&#xA;&lt;p&gt;To do a more interesting benchmark, we can use&#xA;&lt;a href=&#34;https://github.com/sharkdp/hyperfine&#34;&gt;&lt;code&gt;hyperfine&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hyperfine &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zsh -ic exit&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Benchmark 1: zsh -ic exit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Time (mean ± σ):     145.4 ms ±   4.2 ms    [User: 49.8 ms, System: 97.3 ms]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Range (min … max):   138.6 ms … 155.3 ms    19 runs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hyperfine will run the command multiple times and take care of things like&#xA;shell startup time. A really great tool to have in your toolbox by the way, but&#xA;I digress.&lt;/p&gt;&#xA;&lt;p&gt;So let&#39;s do a little time travelling. Going back to commit&#xA;&lt;a href=&#34;https://github.com/thiagokokada/nix-configs/tree/b12757f90889653e359a1ab0a8cfd2f90cfabf31&#34;&gt;&lt;code&gt;b12757f&lt;/code&gt;&lt;/a&gt;&#xA;from &lt;a href=&#34;https://github.com/thiagokokada/nix-configs/&#34;&gt;nix-configs&lt;/a&gt;. Running&#xA;&lt;code&gt;hyperfine&lt;/code&gt; like above from my NixOS laptop, we have:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hyperfine &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zsh -ic exit&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Benchmark 1: zsh -ic exit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Time (mean ± σ):     218.6 ms ±   5.1 ms    [User: 70.6 ms, System: 151.5 ms]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Range (min … max):   210.3 ms … 227.0 ms    13 runs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This doesn&#39;t look that bad, but let&#39;s see the same commit in my Chromebook:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hyperfine &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zsh -ic exit&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Benchmark 1: zsh -ic exit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Time (mean ± σ):     679.7 ms ±  40.2 ms    [User: 230.8 ms, System: 448.5 ms]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Range (min … max):   607.3 ms … 737.0 ms    10 runs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yikes, this is much worse. And those are the results after I retried the&#xA;benchmark (so it is a hot start). The cold start times were above 3s. So let&#39;s&#xA;investigate what is happening here. We can profile what is taking time during&#xA;the startup of ZSH using &lt;a href=&#34;https://www.bigbinary.com/blog/zsh-profiling&#34;&gt;zprof&lt;/a&gt;.&#xA;You can add the following in your &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# At the top of your ~/.zshrc file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zmodload zsh/zprof&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# At the end of your ~/.zshrc file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zprof&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or if using Home-Manager, use the&#xA;&lt;a href=&#34;https://nix-community.github.io/home-manager/options.xhtml#opt-programs.zsh.zprof.enable&#34;&gt;&lt;code&gt;programs.zsh.zprof.enable&lt;/code&gt;&lt;/a&gt;&#xA;option. Once we restart ZSH, we will have something like:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;num  calls                time                       self            name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----------------------------------------------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 1)    1          36.91    36.91   34.29%     30.47    30.47   28.31%  (anon) [/home/thiagoko/.zsh/plugins/zim-completion/init.zsh:13]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 2)    1          25.43    25.43   23.63%     25.43    25.43   23.63%  (anon) [/home/thiagoko/.zsh/plugins/zim-ssh/init.zsh:6]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 3)    1          22.00    22.00   20.45%     21.92    21.92   20.36%  _zsh_highlight_load_highlighters&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 4)    1          12.32    12.32   11.45%     12.32    12.32   11.45%  autopair-init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 5)    1           6.44     6.44    5.98%      6.44     6.44    5.98%  compinit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 6)    1           3.56     3.56    3.31%      3.48     3.48    3.23%  prompt_pure_state_setup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 7)    2           3.79     1.89    3.52%      2.85     1.43    2.65%  async&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 8)    1           0.93     0.93    0.87%      0.93     0.93    0.87%  async_init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 9)    6           0.93     0.15    0.86%      0.93     0.15    0.86%  is-at-least&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10)    6           0.67     0.11    0.63%      0.67     0.11    0.63%  add-zle-hook-widget&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;11)    1           8.25     8.25    7.66%      0.61     0.61    0.57%  prompt_pure_setup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;12)    1           0.40     0.40    0.37%      0.40     0.40    0.37%  (anon) [/nix/store/p1zqypy7600fvfyl1v571bljx2l8zhay-zsh-autosuggestions-0.7.0/share/zsh-autosuggestions/zsh-autosuggestions.zsh:458]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;13)    5           0.31     0.06    0.29%      0.31     0.06    0.29%  add-zsh-hook&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;14)    1           0.60     0.60    0.56%      0.29     0.29    0.27%  (anon) [/home/thiagoko/.zsh/plugins/zim-input/init.zsh:5]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;15)    1           0.21     0.21    0.20%      0.21     0.21    0.20%  compdef&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;16)    1           0.10     0.10    0.09%      0.10     0.10    0.09%  _zsh_highlight__function_is_autoload_stub_p&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17)    1           0.26     0.26    0.24%      0.08     0.08    0.08%  _zsh_highlight__function_callable_p&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;18)    1           0.08     0.08    0.08%      0.08     0.08    0.08%  prompt_pure_is_inside_container&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;19)    1           0.07     0.07    0.07%      0.07     0.07    0.07%  _zsh_highlight__is_function_p&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;20)    1           0.01     0.01    0.01%      0.01     0.01    0.01%  __wezterm_install_bash_prexec&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21)    1           0.00     0.00    0.00%      0.00     0.00    0.00%  _zsh_highlight_bind_widgets&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I ommited some output for brevit. The first 2 things that shows are from the&#xA;&lt;a href=&#34;https://github.com/zimfw/zimfw&#34;&gt;zimfw&lt;/a&gt;, the framework that I use to configure&#xA;my ZSH (similar to Oh-My-Zsh). I actually don&#39;t use &lt;code&gt;zimfw&lt;/code&gt; directly, instead I&#xA;just load some modules that I find useful, like the &lt;code&gt;zim-completion&lt;/code&gt; and&#xA;&lt;code&gt;zim-ssh&lt;/code&gt; that we can see above. By the way, Zim is generally really well&#xA;optimised for startup time, but those 2 modules are kind slow.&lt;/p&gt;&#xA;&lt;p&gt;For &lt;a href=&#34;https://github.com/zimfw/completion&#34;&gt;&lt;code&gt;zim-completion&lt;/code&gt;&lt;/a&gt;, after taking a&#xA;look at it, there isn&#39;t much I could do. It seems that the reason&#xA;&lt;code&gt;zim-completion&lt;/code&gt; takes so long during startup is because it is trying to decide&#xA;if it needs to recompile the completions (and replacing it with just a naive&#xA;&lt;code&gt;autoload -U compinit &amp;amp;&amp;amp; compinit&lt;/code&gt; is even worse for startup performance). I&#xA;may eventually replace it for something else, but I really like what Zim brings&#xA;here, so I decided to not touch it for now.&lt;/p&gt;&#xA;&lt;p&gt;However &lt;a href=&#34;https://github.com/zimfw/ssh&#34;&gt;&lt;code&gt;zim-ssh&lt;/code&gt;&lt;/a&gt; is another history. The only&#xA;reason I used it is to start a &lt;code&gt;ssh-agent&lt;/code&gt; and keep it between multiple ZSH&#xA;sessions. It shouldn&#39;t have that much influence in startup time. So I took a&#xA;look the code (since it is small, I am reproducing it here):&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set up ssh-agent&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Don&amp;#39;t do anything unless we can actually use ssh-agent&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;+commands[ssh-agent]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ssh-add -l &amp;amp;&amp;gt;/dev/null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt; ? &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Unable to contact the authentication agent&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Load stored agent connection info&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    local -r ssh_env&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/.ssh-agent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -r &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ssh_env&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; source &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ssh_env&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &amp;gt;/dev/null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ssh-add -l &amp;amp;&amp;gt;/dev/null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt; ? &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Start agent and store agent connection info&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;umask 066; ssh-agent &amp;gt;! &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ssh_env&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        source &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ssh_env&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &amp;gt;/dev/null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Load identities&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ssh-add -l &amp;amp;&amp;gt;/dev/null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt; ? &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    local -a zssh_ids&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    zstyle -a &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:zim:ssh&amp;#39;&lt;/span&gt; ids &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zssh_ids&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${#&lt;/span&gt;zssh_ids&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ssh-add &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/.ssh/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;^zssh_ids&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; 2&amp;gt;/dev/null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ssh-add 2&amp;gt;/dev/null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, this is bad. Let&#39;s assume the common path, where the &lt;code&gt;ssh-agent&lt;/code&gt; is&#xA;already running but you open a new shell instance (that doesn&#39;t have the&#xA;connection info yet so it will need to load). This will run &lt;code&gt;ssh-add&lt;/code&gt; at 4&#xA;times. How long does &lt;code&gt;ssh-add&lt;/code&gt; takes to run?&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hyperfine -Ni &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ssh-add -l&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Benchmark 1: ssh-add -l&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Time (mean ± σ):       4.6 ms ±   1.1 ms    [User: 2.0 ms, System: 2.0 ms]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Range (min … max):     3.4 ms …   8.7 ms    619 runs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  Warning: Ignoring non-zero exit code.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For those curious, &lt;code&gt;-N&lt;/code&gt; disables the Shell usage, that works better when the&#xA;command being tested is too fast.&lt;/p&gt;&#xA;&lt;p&gt;In average we have 4x4ms=16ms of startup time. But keep in mind the worst case&#xA;can be much worse. The question is, how can we improve the situation here?&lt;/p&gt;&#xA;&lt;p&gt;After taking a look, I decided to write my own code, based in some ideas stolen&#xA;from &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/blob/67581c53c6458566e174620361e84b364b9034d2/plugins/ssh-agent/ssh-agent.plugin.zsh&#34;&gt;Oh-My-Zsh ssh-agent&#xA;plugin&lt;/a&gt;.&#xA;Here is final version of my&#xA;&lt;a href=&#34;https://github.com/thiagokokada/nix-configs/blob/e45a888f2bf3ce5644c3966f0b6371414d0291e2/home-manager/cli/ssh/ssh-agent.zsh&#34;&gt;code&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zmodload zsh/net/socket&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_check_agent&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -S &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$SSH_AUTH_SOCK&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; zsocket &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$SSH_AUTH_SOCK&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; 2&amp;gt;/dev/null; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_start_agent&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Test if $SSH_AUTH_SOCK is visible, in case we start e.g.: ssh-agent via&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# systemd service&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; _check_agent; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Get the filename to store/lookup the environment from&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local -r ssh_env_cache&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$HOME&lt;span style=&#34;color:#e6db74&#34;&gt;/.ssh-agent&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Check if ssh-agent is already running&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$ssh_env_cache&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$ssh_env_cache&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt; /dev/null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Test if $SSH_AUTH_SOCK is visible, e.g.: the ssh-agent is still alive&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; _check_agent; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# start ssh-agent and setup environment&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    umask &lt;span style=&#34;color:#ae81ff&#34;&gt;066&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ssh-agent -s &amp;gt;! &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$ssh_env_cache&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$ssh_env_cache&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt; /dev/null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_start_agent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unfunction _check_agent _start_agent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The idea here is simple: using&#xA;&lt;a href=&#34;https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fnet_002fsocket-Module&#34;&gt;&lt;code&gt;zsocket&lt;/code&gt;&lt;/a&gt;&#xA;module from ZSH itself to check if the &lt;code&gt;ssh-agent&lt;/code&gt; is working instead of&#xA;executing &lt;code&gt;ssh-add -l&lt;/code&gt;. The only case we run any program now is to start the&#xA;agent itself if needed. Let&#39;s run &lt;code&gt;hyperfine&lt;/code&gt; again:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ hyperfine &amp;quot;zsh -ic exit&amp;quot;&#xA;Benchmark 1: zsh -ic exit&#xA;  Time (mean ± σ):     188.3 ms ±   8.2 ms    [User: 61.1 ms, System: 130.0 ms]&#xA;  Range (min … max):   170.9 ms … 198.4 ms    16 runs&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Got a good improvement here already. Let&#39;s see &lt;code&gt;zprof&lt;/code&gt; again:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;num  calls                time                       self            name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----------------------------------------------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 1)    1          41.23    41.23   48.66%     33.52    33.52   39.56%  (anon) [/home/thiagoko/.zsh/plugins/zim-completion/init.zsh:13]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 2)    1          22.23    22.23   26.24%     22.12    22.12   26.10%  _zsh_highlight_load_highlighters&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 3)    1           8.90     8.90   10.51%      8.90     8.90   10.51%  Gautopair-init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 4)    1           7.71     7.71    9.10%      7.71     7.71    9.10%  compinit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 5)    1           5.74     5.74    6.77%      5.60     5.60    6.60%  prompt_pure_state_setup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 6)    6           1.19     0.20    1.41%      1.19     0.20    1.41%  add-zle-hook-widget&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 7)    2           1.97     0.99    2.33%      1.14     0.57    1.34%  async&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 8)    6           0.87     0.15    1.03%      0.87     0.15    1.03%  is-at-least&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 9)    1           0.84     0.84    0.99%      0.84     0.84    0.99%  async_init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10)    1           9.30     9.30   10.97%      0.72     0.72    0.84%  prompt_pure_setup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;11)    5           0.63     0.13    0.75%      0.63     0.13    0.75%  add-zsh-hook&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;12)    1           0.41     0.41    0.48%      0.41     0.41    0.48%  _start_agent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;13)    1           0.31     0.31    0.37%      0.31     0.31    0.37%  (anon) [/nix/store/p1zqypy7600fvfyl1v571bljx2l8zhay-zsh-autosuggestions-0.7.0/share/zsh-autosuggestions/zsh-autosuggestions.zsh:458]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;14)    1           0.55     0.55    0.64%      0.24     0.24    0.28%  (anon) [/home/thiagoko/.zsh/plugins/zim-input/init.zsh:5]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;15)    1           0.14     0.14    0.16%      0.14     0.14    0.16%  prompt_pure_is_inside_container&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;16)    1           0.14     0.14    0.16%      0.14     0.14    0.16%  compdef&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17)    1           0.09     0.09    0.11%      0.09     0.09    0.11%  _zsh_highlight__function_is_autoload_stub_p&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;18)    1           0.25     0.25    0.29%      0.08     0.08    0.09%  _zsh_highlight__function_callable_p&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;19)    1           0.07     0.07    0.09%      0.07     0.07    0.09%  _zsh_highlight__is_function_p&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;20)    1           0.01     0.01    0.01%      0.01     0.01    0.01%  __wezterm_install_bash_prexec&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21)    1           0.01     0.01    0.01%      0.01     0.01    0.01%  _zsh_highlight_bind_widgets&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, there is nothing interesting here anymore. I mean, &lt;code&gt;zim-completion&lt;/code&gt; is&#xA;still the main culprit, but nothing to do for now. Instead of looking at&#xA;&lt;code&gt;zproof&lt;/code&gt;, let&#39;s take a look at my &lt;code&gt;~/.zshrc&lt;/code&gt; instead:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $options&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;zle&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; on &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;/nix/store/sk6wsgp4h477baxypksz9rl8ldwwh9yg-fzf-0.54.0/bin/fzf --zsh&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/nix/store/x3yblr73r5x76dmaanjk3333mvzxc49r-any-nix-shell-1.2.1/bin/any-nix-shell zsh | source /dev/stdin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;/nix/store/330d6k81flfs6w46b44afmncxk57qggv-zoxide-0.9.4/bin/zoxide init zsh &lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;/nix/store/8l9j9kdv9m0z0s30lp4yvrc9s5bcbgmx-direnv-2.34.0/bin/direnv hook zsh&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So you see, starting all those programs during ZSH startup can hurt the shell&#xA;startup considerable. Not necessary for commands fast like &lt;code&gt;fzf&lt;/code&gt; (that is&#xA;written in Go), but let&#39;s see&#xA;&lt;a href=&#34;https://github.com/haslersn/any-nix-shell&#34;&gt;&lt;code&gt;any-nix-shell&lt;/code&gt;&lt;/a&gt;, that is written&#xA;in shell script:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hyperfine &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;any-nix-shell zsh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Benchmark 1: any-nix-shell zsh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Time (mean ± σ):      16.0 ms ±   1.8 ms    [User: 5.6 ms, System: 10.5 ms]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Range (min … max):    11.3 ms …  20.3 ms    143 runs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is bad, consistently bad actually. Even for commands that are fast, keep&#xA;in mind that there is a difference between the cold and hot start again. For&#xA;example, &lt;code&gt;fzf&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hyperfine -N &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fzf --zsh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Benchmark 1: fzf --zsh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Time (mean ± σ):       2.9 ms ±   0.9 ms    [User: 0.6 ms, System: 2.3 ms]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Range (min … max):     1.7 ms …   6.8 ms    1113 runs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See the range? While 1.7ms is something that is probably difficult to notice,&#xA;6.8ms can be noticiable, especially if this accumulates with other slow&#xA;starting apps.&lt;/p&gt;&#xA;&lt;p&gt;And the thing is, all those commands are just generating in the end a fixed&#xA;output, at least for the current version of the program. Can we pre-generate&#xA;them instead? If using Nix, of course we can:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# You need to disable the default integration&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;direnv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enableZshIntegration &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fzf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enableZshIntegration &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zoxide&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enableZshIntegration &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zsh&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;initExtra &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# bash&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # any-nix-shell&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    source &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;runCommand &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;any-nix-shell-zsh&amp;#34;&lt;/span&gt; { } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getExe pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;any-nix-shell&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; zsh &amp;gt; $out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;#39;&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # fzf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    source &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fzf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;package&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/share/fzf/completion.zsh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    source &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fzf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;package&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/share/fzf/key-bindings.zsh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # zoxide&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    source &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;runCommand &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zoxide-init-zsh&amp;#34;&lt;/span&gt; { } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getExe config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zoxide&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;package&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; init zsh &amp;gt; $out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;#39;&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # direnv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    source &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;runCommand &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;direnv-hook-zsh&amp;#34;&lt;/span&gt; { } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getExe config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;direnv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;package&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; hook zsh &amp;gt; $out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;#39;&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we can use &lt;code&gt;pkgs.runCommand&lt;/code&gt; to run those commands during build time and&#xA;&lt;code&gt;source&lt;/code&gt; the result. &lt;code&gt;fzf&lt;/code&gt; actually doesn&#39;t need this since we have the files&#xA;already generated in the package. I think this is one of those things that&#xA;really shows the power of Nix: I wouldn&#39;t do something similar if I didn&#39;t use&#xA;Nix because the risk of breaking something later is big (e.g.: forgetting to&#xA;update the generated files), but Nix makes those things trivial.&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s run &lt;code&gt;hyperfine&lt;/code&gt; again:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ hyperfine &amp;quot;zsh -ic exit&amp;quot;&#xA;Benchmark 1: zsh -ic exit&#xA;  Time (mean ± σ):     162.3 ms ±   4.9 ms    [User: 52.7 ms, System: 111.1 ms]&#xA;  Range (min … max):   153.0 ms … 173.4 ms    19 runs&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Another good improvement. The last change I did is switching between&#xA;&lt;a href=&#34;https://github.com/zsh-users/zsh-syntax-highlighting&#34;&gt;&lt;code&gt;zsh-syntax-highlighting&lt;/code&gt;&lt;/a&gt;&#xA;to&#xA;&lt;a href=&#34;https://github.com/zdharma-continuum/fast-syntax-highlighting&#34;&gt;&lt;code&gt;zsh-fast-syntax-highlighting&lt;/code&gt;&lt;/a&gt;,&#xA;that is supposed to be faster and have better highlighting too. I got that from&#xA;&lt;code&gt;_zsh_highlight_load_highlighters&lt;/code&gt; using 26% of the time from my &lt;code&gt;zprof&lt;/code&gt; above.&#xA;And for the final &lt;code&gt;hyperfine&lt;/code&gt; in my laptop:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ hyperfine &amp;quot;zsh -ic exit&amp;quot;&#xA;Benchmark 1: zsh -ic exit&#xA;  Time (mean ± σ):     138.3 ms ±   7.1 ms    [User: 47.5 ms, System: 91.9 ms]&#xA;  Range (min … max):   123.8 ms … 157.9 ms    21 runs&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;A ~36% improvement, not bad. Let&#39;s see how it fares in my Chromebook:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ hyperfine &amp;quot;zsh -ic exit&amp;quot;&#xA;Benchmark 1: zsh -ic exit&#xA;  Time (mean ± σ):     278.2 ms ±  46.9 ms    [User: 88.0 ms, System: 184.8 ms]&#xA;  Range (min … max):   204.7 ms … 368.5 ms    11 runs&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;An even more impressive ~59% improvement. And yes, the shell startup now feels&#xA;much better.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-08-01/01-troubleshoting-zsh-lag-and-solutions-with-nix.md</guid>
      <pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Generating YAML files with Nix</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-07-31/01-generating-yaml-files-with-nix.md</link>
      <description>&lt;p&gt;I hate YAML. Instead of writing an essay on why I hate YAML, I can just link to&#xA;&lt;a href=&#34;https://noyaml.com/&#34;&gt;noyaml.com&lt;/a&gt;. In my personal projects I will never use it,&#xA;preferring either JSON, &lt;a href=&#34;https://toml.io/en/&#34;&gt;TOML&lt;/a&gt; or even plain old&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/INI_file&#34;&gt;INI&lt;/a&gt; files depending on the use case.&#xA;However the ship has sailed already, there are tons of projects everywhere that&#xA;uses YAML: from most CI systems (&lt;a href=&#34;https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions&#34;&gt;GitHub&#xA;Actions&lt;/a&gt;,&#xA;&lt;a href=&#34;https://circleci.com/docs/introduction-to-yaml-configurations/&#34;&gt;CircleCI&lt;/a&gt;,&#xA;&lt;a href=&#34;https://docs.travis-ci.com/user/build-config-yaml&#34;&gt;Travis&lt;/a&gt;, &lt;em&gt;et tu&lt;/em&gt;&#xA;&lt;a href=&#34;https://man.sr.ht/builds.sr.ht/&#34;&gt;builds.sr.ht&lt;/a&gt;), to&#xA;&lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/&#34;&gt;Kubernetes&lt;/a&gt;,&#xA;or in almost every&#xA;&lt;a href=&#34;https://guides.rubyonrails.org/configuring.html#configuring-a-database&#34;&gt;Rails&lt;/a&gt;&#xA;application.&lt;/p&gt;&#xA;&lt;p&gt;One way to avoid at least some issues with the language is to write YAML in&#xA;another language. I will show my solution in one of my &lt;a href=&#34;https://github.com/thiagokokada/nix-configs/&#34;&gt;personal&#xA;repositories&lt;/a&gt;, writing Nix to&#xA;generate GitHub Actions configuration files. Bonus points for validating the&#xA;result against the schema of GitHub Actions, so the famous &amp;quot;this is supposed to&#xA;be string instead of a list of strings&amp;quot; is gone.&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s start with the basics: YAML is supposed to be a &lt;a href=&#34;https://stackoverflow.com/a/1729545&#34;&gt;superset of&#xA;JSON&lt;/a&gt;. What that means is that a JSON file&#xA;&lt;a href=&#34;https://yaml.org/spec/1.2-old/spec.html#id2759572&#34;&gt;can be parsed&lt;/a&gt; by a YAML&#xA;parser. And Nix itself generates JSON natively, after all, Nix can be imagined&#xA;as &lt;a href=&#34;https://nix.dev/tutorials/nix-language.html&#34;&gt;&amp;quot;JSON with functions&amp;quot;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;To make things easier, I will assume that you have the &lt;code&gt;nix-commands&lt;/code&gt; and&#xA;&lt;code&gt;flakes&lt;/code&gt; enabled as &lt;code&gt;experimental-features&lt;/code&gt; in your Nix configuration. If not,&#xA;go &lt;a href=&#34;https://wiki.nixos.org/wiki/Flakes&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Using the &lt;code&gt;nix eval&lt;/code&gt; command, we can generate a JSON expression from Nix by:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix eval --expr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{ foo = &amp;#34;bar&amp;#34;; }&amp;#39;&lt;/span&gt; --json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&amp;#34;foo&amp;#34;:&amp;#34;bar&amp;#34;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, typing long excerpts of Nix code inside the console would be&#xA;impractical. We can write the following code inside a &lt;code&gt;foo.nix&lt;/code&gt; file instead:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  foo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix eval --file foo.nix --json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&amp;#34;foo&amp;#34;:&amp;#34;bar&amp;#34;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While you can use a JSON output as an input for YAML parsers, it is probably&#xA;not the &lt;a href=&#34;https://metacpan.org/pod/JSON::XS#JSON-and-YAML&#34;&gt;best idea&lt;/a&gt;. Sadly (or&#xA;maybe not), Nix has no native functionality to export data to YAML. However,&#xA;since we are using Nix, it is trivial to use &lt;code&gt;nixpkgs&lt;/code&gt; to use some program to&#xA;convert from JSON to YAML.&lt;/p&gt;&#xA;&lt;p&gt;To start, let&#39;s create a new directory, move our &lt;code&gt;foo.nix&lt;/code&gt; file to it, create a&#xA;new &lt;code&gt;flake.nix&lt;/code&gt; file and put the following contents:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Generate YAML files with Nix&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:NixOS/nixpkgs/nixos-unstable&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      packages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x86_64-linux &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt; (nixpkgs) lib;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nixpkgs { system &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64-linux&amp;#34;&lt;/span&gt;; };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          toYAML &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;runCommand &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;toYAML&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            buildInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [ yj ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builtins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toJSON (&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./go.nix&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            passAsFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt; ]; &lt;span style=&#34;color:#75715e&#34;&gt;# will be available as `$jsonPath`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            mkdir -p $out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            yj -jy &amp;lt; &amp;#34;$jsonPath&amp;#34; &amp;gt; $out/go.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#39;&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are loading the &lt;code&gt;./foo.nix&lt;/code&gt; as a Nix file, converting it to JSON with&#xA;&lt;code&gt;builtins.toJSON&lt;/code&gt; function, and finally, using &lt;code&gt;pkgs.runCommand&lt;/code&gt; and its&#xA;&lt;code&gt;passAsFile&lt;/code&gt; option to load the contents of the JSON file into&#xA;&lt;a href=&#34;https://github.com/sclevine/yj&#34;&gt;yj&lt;/a&gt;, that converts between serialisation&#xA;formats (&lt;code&gt;-jy&lt;/code&gt; flag means &amp;quot;JSON to YAML&amp;quot;). The reason I choose &lt;code&gt;yj&lt;/code&gt; is mostly&#xA;because it is a single binary Go program, but you can use whatever you prefer.&lt;/p&gt;&#xA;&lt;p&gt;By the way, there is a&#xA;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/blob/9f918d616c5321ad374ae6cb5ea89c9e04bf3e58/lib/generators.nix#L805&#34;&gt;&lt;code&gt;lib.generators.toYAML&lt;/code&gt;&lt;/a&gt;&#xA;inside &lt;code&gt;nixpkgs.lib&lt;/code&gt;, but as of the day of this post it only calls&#xA;&lt;code&gt;lib.strings.toJSON&lt;/code&gt; (that in turn, calls &lt;code&gt;builtins.toJSON&lt;/code&gt;). So it doesn&#39;t&#xA;really help here. Another option would be &lt;code&gt;pkgs.formats.yaml.generate&lt;/code&gt;, that&#xA;converts between formats, but it calls&#xA;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/blob/008ceae1a2b47a84d7aa01e55f8468272c70b9ee/pkgs/pkgs-lib/formats.nix#L77-L84&#34;&gt;&lt;code&gt;remarshal&lt;/code&gt;&lt;/a&gt;&#xA;(in Python), so not my favorite choice.&lt;/p&gt;&#xA;&lt;p&gt;If we run the following commands, we can see the result:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nix build .#packages.x86_64-linux.toYAML&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat result/foo.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foo: bar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is the basic idea. To have a more realistic example, let&#39;s convert the&#xA;&lt;a href=&#34;https://github.com/thiagokokada/blog/blob/4e3f25485c6682f3e066b219df2290934bc0d256/.github/workflows/go.yml&#34;&gt;&lt;code&gt;go.yml&lt;/code&gt;&lt;/a&gt;,&#xA;that builds this blog, to Nix:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;branches &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt; ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  jobs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    build &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      runs-on &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ubuntu-latest&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      permissions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;write&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      steps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        { uses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;actions/checkout@v4&amp;#34;&lt;/span&gt;; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set up Go&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          uses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;actions/checkout@v4&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;with&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;go-version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.21&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Update&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          run &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;make&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Publish&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          run &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;make publish&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          env&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MATAROA_TOKEN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;&amp;#39;$&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{{ secrets.MATAROA_TOKEN }}&amp;#39;&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Commit&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          uses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stefanzweifel/git-auto-commit-action@v5&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;with&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commit_message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;README/rss:update&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some interesting things to highlight: &lt;code&gt;with&lt;/code&gt; is a reserved word in Nix, so we&#xA;need to quote it. Not a problem, but something to be aware. And the template&#xA;string in GitHub Actions uses the same &lt;code&gt;${}&lt;/code&gt; that Nix uses, so we need to&#xA;escape.&lt;/p&gt;&#xA;&lt;p&gt;And after running the following commands:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ nix build .#packages.x86_64-linux.toYAML&#xA;$ cat result/go.yaml&#xA;jobs:&#xA;  build:&#xA;    permissions:&#xA;      contents: write&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v4&#xA;      - name: Set up Go&#xA;        uses: actions/checkout@v4&#xA;        with:&#xA;          go-version: &amp;quot;1.21&amp;quot;&#xA;      - name: Update&#xA;        run: make&#xA;      - env:&#xA;          MATAROA_TOKEN: ${{ secrets.MATAROA_TOKEN }}&#xA;        name: Publish&#xA;        run: make publish&#xA;      - name: Commit&#xA;        uses: stefanzweifel/git-auto-commit-action@v5&#xA;        with:&#xA;          commit_message: README/rss:update&#xA;name: Go&#xA;&amp;quot;on&amp;quot;:&#xA;  push:&#xA;    branches:&#xA;      - main&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Yes, the keys are not in the same order as we defined, since Nix, like most&#xA;programming languages (with the exception of&#xA;&lt;a href=&#34;https://mail.python.org/pipermail/python-dev/2017-December/151283.html&#34;&gt;Python&lt;/a&gt;),&#xA;do not guarantee the insertion order in maps/dicts/attrsets/whatever. But I&#xA;really hope whatever is consuming your YAML is not relying in the order the&#xA;keys are defined (this would be more cursed than YAML already is).&lt;/p&gt;&#xA;&lt;p&gt;So that is basically it. For the bonus points that I talked at the start of the&#xA;post, we can modify &lt;code&gt;pkgs.runCommand&lt;/code&gt; to run some kind of validator. I use&#xA;&lt;a href=&#34;https://github.com/mpalmer/action-validator&#34;&gt;&lt;code&gt;action-validator&lt;/code&gt;&lt;/a&gt;, one that I&#xA;particularly packaged in&#xA;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/260217&#34;&gt;nixpkgs&lt;/a&gt; to use in those cases.&#xA;But you could use e.g.: a validator of Kubernetes YAML. Or a generic YAML lint&#xA;like this &lt;a href=&#34;https://github.com/adrienverge/yamllint&#34;&gt;one&lt;/a&gt;. The possibilities are&#xA;endless.&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s modify our &lt;code&gt;flake.nix&lt;/code&gt; to add the validation:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      packages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x86_64-linux &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt; (nixpkgs) lib;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nixpkgs { system &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64-linux&amp;#34;&lt;/span&gt;; };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          toYAML &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;runCommand &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;toYAML&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            buildInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [ action-validator yj ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; builtins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toJSON (&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./go.nix&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            passAsFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt; ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            mkdir -p $out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            yj -jy &amp;lt; &amp;#34;$jsonPath&amp;#34; &amp;gt; $out/go.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            action-validator -v $out/go.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#39;&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And let&#39;s add an error in our &lt;code&gt;go.nix&lt;/code&gt; file:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/go.nix b/go.nix&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index 25e0596..8c00033 100644&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- a/go.nix&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ b/go.nix&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -5,7 +5,7 @@&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   jobs = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     build = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       runs-on = &amp;#34;ubuntu-latest&amp;#34;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-      permissions.contents = &amp;#34;write&amp;#34;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+      permissions.contents = [ &amp;#34;write&amp;#34; ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;       steps = [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         { uses = &amp;#34;actions/checkout@v4&amp;#34;; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, let&#39;s try to build our YAML file again:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$ nix build .#packages.x86_64-linux.toYAML&#xA;error: builder for &#39;/nix/store/j8wr6j1pvyf986sf74hqw8k31lvlzac5-toYAML.drv&#39; failed with exit code 1;&#xA;       last 25 log lines:&#xA;       &amp;gt;                                 &amp;quot;Additional property &#39;runs-on&#39; is not allowed&amp;quot;,&#xA;       &amp;gt;                             ),&#xA;       &amp;gt;                             path: &amp;quot;/jobs/build&amp;quot;,&#xA;       &amp;gt;                             title: &amp;quot;Property conditions are not met&amp;quot;,&#xA;       &amp;gt;                         },&#xA;       &amp;gt;                         Properties {&#xA;       &amp;gt;                             code: &amp;quot;properties&amp;quot;,&#xA;       &amp;gt;                             detail: Some(&#xA;       &amp;gt;                                 &amp;quot;Additional property &#39;steps&#39; is not allowed&amp;quot;,&#xA;       &amp;gt;                             ),&#xA;       &amp;gt;                             path: &amp;quot;/jobs/build&amp;quot;,&#xA;       &amp;gt;                             title: &amp;quot;Property conditions are not met&amp;quot;,&#xA;       &amp;gt;                         },&#xA;       &amp;gt;                         Required {&#xA;       &amp;gt;                             code: &amp;quot;required&amp;quot;,&#xA;       &amp;gt;                             detail: None,&#xA;       &amp;gt;                             path: &amp;quot;/jobs/build/uses&amp;quot;,&#xA;       &amp;gt;                             title: &amp;quot;This property is required&amp;quot;,&#xA;       &amp;gt;                         },&#xA;       &amp;gt;                     ],&#xA;       &amp;gt;                 },&#xA;       &amp;gt;             ],&#xA;       &amp;gt;         },&#xA;       &amp;gt;     ],&#xA;       &amp;gt; }&#xA;       For full logs, run &#39;nix log /nix/store/j8wr6j1pvyf986sf74hqw8k31lvlzac5-toYAML.drv&#39;.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Yes, the output of &lt;code&gt;action-validator&lt;/code&gt; is awfully verbose, but it is still&#xA;better than making &lt;a href=&#34;https://x.com/eric_sink/status/1430954572848287744&#34;&gt;&amp;quot;8 commits/push in one&#xA;hour&amp;quot;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;If you are interested in how a more advantage usage of this technique is,&#xA;including usage of functions and constants to share common steps between&#xA;different actions, please take a look at the&#xA;&lt;a href=&#34;https://github.com/thiagokokada/nix-configs/tree/master/actions&#34;&gt;actions&lt;/a&gt;&#xA;(&lt;a href=&#34;https://github.com/thiagokokada/nix-configs/tree/fbbc8f935cc7f774f691196e1612bbf7dd2054b5/actions&#34;&gt;permalink&lt;/a&gt;)&#xA;in my &lt;code&gt;nix-config&lt;/code&gt; repository.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-07-31/01-generating-yaml-files-with-nix.md</guid>
      <pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>First impressions: FPGBC</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-07-30/01-first-impressions-fpgbc.md</link>
      <description>&lt;p&gt;Here is something for nostalgia: I just put together a &lt;a href=&#34;https://en.wikipedia.org/wiki/Game_Boy_Color&#34;&gt;Game Boy&#xA;Color&lt;/a&gt; made of completely new&#xA;parts for a friend: here is the&#xA;&lt;a href=&#34;https://funnyplaying.com/products/fpgbc-kit&#34;&gt;FPGBC&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;em&gt;FP&lt;/em&gt; part of the name comes from&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Field-programmable_gate_array&#34;&gt;FPGA&lt;/a&gt;, because&#xA;instead of software emulation this device use FPGA to reproduce the device.&#xA;While I am not convinced that FPGA is necessary more accurate than a good&#xA;software emulator, one advantage of FPGA is the (possible) lower input latency&#xA;thanks to the avoidance of complexity to handle the user input (e.g.: the&#xA;Operational System). A quick playthrough against &lt;a href=&#34;https://en.wikipedia.org/wiki/Motocross_Maniacs&#34;&gt;Motocross&#xA;Maniacs&lt;/a&gt; seems to be fine, but&#xA;I can&#39;t see much difference from my &lt;a href=&#34;https://retrogamecorps.com/2022/05/15/miyoo-mini-v2-guide/&#34;&gt;Miyoo&#xA;Mini+&lt;/a&gt; (I will do&#xA;more comparisons between the two devices later), that is a software emulation&#xA;device.&lt;/p&gt;&#xA;&lt;p&gt;But I think focusing in accuracy is wrong, the main reason of getting a device&#xA;like this one is for nostalgia, and this definitely hit the mark. The quality&#xA;of the case is as good as I remember the original, and most of the details are&#xA;replicate perfectly, including reproduction stickers in the back of the device.&#xA;The only differences that I can find is the usage of USB-C port for charging in&#xA;place of the barrel jack power adapter (thanks!), and the fact that the screen&#xA;bezels are smaller compared to the original (because the screen is bigger) and&#xA;doesn&#39;t include the Game Boy Color logo (that is fine in my opinion, since it&#xA;would look weird in the fine bezels). It even has a supposedly working &lt;a href=&#34;https://en.wikipedia.org/wiki/Game_Link_Cable&#34;&gt;Link&#xA;Cable&lt;/a&gt; (I don&#39;t have another&#xA;Game Boy to test). Sadly it is missing the infrared sensor, but the usage of&#xA;that was pretty limited anyway.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/thiagokokada/blog/raw/main/2024-07-30/PXL_20240729_175245569.jpg&#34; alt=&#34;FPGBC running Tetris.&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/thiagokokada/blog/raw/main/2024-07-30/PXL_20240729_175131157.jpg&#34; alt=&#34;Back of FPGBC. It includes even reproduction stickers of the original.&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;So how well does it work? I can&#39;t say for sure. I don&#39;t have any original games&#xA;with me, so I am relying in backups and a&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Flashcard&#34;&gt;flashcard&lt;/a&gt; for now. Many games that I&#xA;tested works fine, a few of them have graphical issues that can be fixed in the&#xA;menu (more about it later), and some of them doesn&#39;t boot. But I don&#39;t know if&#xA;the issue with the games not booting are because of the roms, the flashcard or&#xA;the device itself.&lt;/p&gt;&#xA;&lt;p&gt;By the way, the flashcard I am using is a cheap knockoff of an &lt;a href=&#34;https://gbatemp.net/review/everdrive-gb.141/&#34;&gt;Everdrive&#xA;GB&lt;/a&gt;. This FPGBC came with&#xA;firmware v1.09, while there is an update available for v1.10 in the&#xA;&lt;a href=&#34;https://funnyplaying.com/products/fpgbc-kit&#34;&gt;website&lt;/a&gt;. I had an weird issue in&#xA;the new firmware where no games would boot with this knockoff Everdrive so I&#xA;had to go back to v1.09, but again, I am not sure if the issue was fact that I&#xA;am using a knockoff device or this would happen with an original Everdrive GB.&#xA;If you are going to buy a proper Everdrive, you probably wouldn&#39;t get a&#xA;Everdrive GB anyway since it is discontinued, and it seems the &lt;a href=&#34;https://www.reddit.com/r/Gameboy/comments/1atwjh3/fpgbc_everdrive_compatibility/&#34;&gt;newer&#xA;versions&lt;/a&gt;&#xA;have better compatibility with FPGBC.&lt;/p&gt;&#xA;&lt;p&gt;Sadly that the update didn&#39;t work, since there is this&#xA;&lt;a href=&#34;https://github.com/makhowastaken/GWGBC_FW&#34;&gt;repository&lt;/a&gt; that patches the&#xA;firmware to boot the original logo instead of the ugly FPGBC one. And yes, for&#xA;some reason the v1.09 firmware from this repository still doesn&#39;t work with my&#xA;knockoff Everdrive.&lt;/p&gt;&#xA;&lt;p&gt;By the way, it seems the device is not easy to brick: I borked the firmware&#xA;update process once while trying to downgrade back to v1.09, resulting in a&#xA;black screen when I turned on the console. But just connecting the device to&#xA;the computer and powering on, I could flash the firmware again and the device&#xA;came back to life.&lt;/p&gt;&#xA;&lt;p&gt;About the features of the device: if you press the volume button (yes, you can&#xA;press it now), it opens the following menu:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/thiagokokada/blog/raw/main/2024-07-30/PXL_20240729_210604830.jpg&#34; alt=&#34;FPGBC menu.&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The first 2 options are the LCD backlight (&lt;code&gt;BKLT&lt;/code&gt;) and volume (&lt;code&gt;VOL&lt;/code&gt;). I didn&#39;t talk about&#xA;those, but the LCD screen seems to be IPS, and the quality is really good, and&#xA;also looks bright enough to play even under bad lightining conditions. And the&#xA;speaker has good quality, the sound is better than I remember, but sadly the&#xA;maximum volume is kind low. Still should be enough for playing in a quiet room.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;DISPMOD&lt;/code&gt; is probably the most controversial option: it allow you to set which&#xA;scale you want. Anything with &lt;code&gt;EMU&lt;/code&gt; at the end means emulating the original&#xA;colors, and as far I remember it gets really close. You can also chose betwen&#xA;&lt;code&gt;X4&lt;/code&gt;, &lt;code&gt;X4P&lt;/code&gt; and &lt;code&gt;FUL&lt;/code&gt;, the last one is the one shown in the photos where the&#xA;image fills the whole screen at the cost of non-integer scaling. &lt;code&gt;X4&lt;/code&gt; is&#xA;integer scaling, however the image doesn&#39;t fill the whole screen. The &lt;code&gt;X4P&lt;/code&gt;&#xA;also includes a pixel effect that makes the image closer than the original&#xA;screen. It actually looks good, but the fact that I chose a white border for&#xA;this FPGBC makes the border really distracting. Maybe the black one is a better&#xA;choice if you want integer scale.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;CORE&lt;/code&gt; is simple: you can choose between &lt;code&gt;GB&lt;/code&gt; (Game Boy) or &lt;code&gt;GBC&lt;/code&gt; (Game Boy&#xA;Color). For those who don&#39;t know, you can run Game Boy games in Game Boy Color&#xA;and they will be automatically colorised. Some people don&#39;t like this and&#xA;prefer the colors of &lt;code&gt;GB&lt;/code&gt;, so you have this option. The &lt;code&gt;GB_PALETTE&lt;/code&gt; allows you&#xA;to chose the color in GB mode, for example, the green-ish colors from the&#xA;original Game Boy or the blue-ish colors from &lt;a href=&#34;https://nintendo.fandom.com/wiki/Game_Boy_Light&#34;&gt;Game Boy&#xA;Light&lt;/a&gt;. And yes, you can&#xA;choose the color palette for Game Boy games running in &lt;code&gt;GBC&lt;/code&gt; mode by pressing a&#xA;&lt;a href=&#34;https://gbstudiocentral.com/tips/game-boy-color-modes/&#34;&gt;button combination&lt;/a&gt; at&#xA;the boot screen, but it seems not working in my unit and again, not sure if the&#xA;fault is my knockoff Everdrive.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;FRAME_MIX&lt;/code&gt; basically is an option that makes some effects, like transparency&#xA;in &lt;a href=&#34;https://en.wikipedia.org/wiki/Wave_Race&#34;&gt;Wave Race&lt;/a&gt;, to work at the cost of&#xA;introducing blurriness. The reason for this is that those effects depends in&#xA;the fact that the Game Boy screen was slow refresh, so you could rely on it by&#xA;rapidly changing pixels to create some interesting effects, but sadly those&#xA;effects doesn&#39;t work well in modern displays.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;GB_CLRFIX&lt;/code&gt; is the option I mentioned before, where some Game Boy games just&#xA;get completely wrong colors for some reason, e.g.: &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Addams_Family_(video_game)&#34;&gt;The Addams&#xA;Family&lt;/a&gt;. Turning&#xA;on fixes those games, but I am not sure if this option breaks other games.&lt;/p&gt;&#xA;&lt;p&gt;Finally, &lt;code&gt;SPD&lt;/code&gt; allows you to increase or decrease the CPU clock, slowing or&#xA;speeding up the games (including the sound). The result can be hilarious, so I&#xA;think this is a nice addition to the features. Sadly you can&#39;t know what the&#xA;default speed is, so you need to rely on sound to adjust back to the default.&lt;/p&gt;&#xA;&lt;p&gt;So in the end, can I recommend a FPGBC? I am not sure. If you want a device to&#xA;play games, I still think something like a Miyoo Mini+ is a better choice. Not&#xA;only you will have access to more games from different platforms, you also&#xA;don&#39;t need to rely on flashcards or cartridges. Also it has way more features&#xA;than FPGBC, like wireless multiplayer,&#xA;&lt;a href=&#34;https://retroachievements.org/&#34;&gt;RetroArchivements&lt;/a&gt; and save states.&lt;/p&gt;&#xA;&lt;p&gt;But the actual reason to get a FPGBC is nostalgia, and for that I think the&#xA;FPGBC is difficult to beat. The price of the &lt;a href=&#34;https://funnyplaying.com/products/fpgbc-kit&#34;&gt;kit to&#xA;assemble&lt;/a&gt; ($69.90) is cheaper than&#xA;most Game Boy&#39;s in good condition you can find in eBay, and you get for that&#xA;price a rechargable battery, an amazing quality screen, the PCB and the&#xA;speaker. You need to buy separately the case and the buttons, but in total you&#xA;will still end up paying less, and allows you to fully customise your build.&#xA;And the result device is not only in mint condition, it is really convenient&#xA;too: recharging batteries (via USB-C even) is much more convenient than buying&#xA;AA batteries, and the screen not only is better but it even has backlight. You&#xA;can also buy a fully built console for&#xA;&lt;a href=&#34;https://funnyplaying.com/products/fpgbc-console&#34;&gt;$99.00&lt;/a&gt;, but you have less&#xA;options of customisation.&lt;/p&gt;&#xA;&lt;p&gt;This is the classic case of do what I say, don&#39;t do what I do. This FPGBC is a&#xA;gift, and I will buy another one soon. Can&#39;t wait to play &lt;a href=&#34;https://en.wikipedia.org/wiki/Pok%C3%A9mon_Gold_and_Silver&#34;&gt;Pokémon&#xA;Gold&lt;/a&gt; in (almost)&#xA;original hardware again.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/thiagokokada/blog/raw/main/2024-07-30/PXL_20240729_123847458.jpg&#34; alt=&#34;The kit before assemble.&#34;&gt;&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-07-30/01-first-impressions-fpgbc.md</guid>
      <pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Go, a reasonable good language</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-07-29/02-go-a-reasonable-good-language.md</link>
      <description>&lt;p&gt;Go was one of the languages that I always was interested to learn, but never&#xA;got the hang of it. I first got interested in the language when I was in my&#xA;first job, between 2016-2018. At the time the language was a completely&#xA;different beast: no modules, no generics, no easy way to error wrap yet, etc.&lt;/p&gt;&#xA;&lt;p&gt;Go forward 2023 (no pun indented), I wrote my &lt;a href=&#34;https://github.com/thiagokokada/twenty-twenty-twenty/&#34;&gt;first project in&#xA;Go&lt;/a&gt;, wrote some scripts&#xA;at &lt;code&gt;$CURRENT_JOB&lt;/code&gt; in the language, and now wrote &lt;a href=&#34;https://github.com/thiagokokada/hyprland-go/&#34;&gt;my first&#xA;library&lt;/a&gt; (with an &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-26/01-writing-nixos-tests-for-fun-and-profit.md&#34;&gt;interesting&#xA;way to run CI&lt;/a&gt;). I am&#xA;also writing more&#xA;&lt;a href=&#34;https://github.com/thiagokokada/nix-configs/blob/8c559527ed12e1d4f57a3fc5c72630b956f4c290/home-manager/desktop/wayland/hyprland/hyprtabs/hyprtabs.go&#34;&gt;scripts&lt;/a&gt;&#xA;in the language, where I would prefer to use Bash or Python before. Heck, even&#xA;this blog is automatically published with a &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-29/01-quick-bits-why-you-should-automate-everything.md&#34;&gt;Go&#xA;script&lt;/a&gt;, that&#xA;used to be a &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-26/02-using-github-as-a-bad-blog-platform.md&#34;&gt;Python&#xA;one&lt;/a&gt; before. I can say&#xA;that nowadays it is another language in my toolbox, and while it is still a&#xA;love and hate relationship, recently it is more about love and less about hate.&lt;/p&gt;&#xA;&lt;p&gt;The points that I love about Go is probably obvious for some, but still&#xA;interesting to talk about anyway. The fact that the language generates static&#xA;binaries by default and have fast compilation times is something that I&#xA;apreciate since I first heard about the language, and now that I am using the&#xA;language frequently, are points thatI appreciate even more. Something about&#xA;getting almost instant feedback after changing a line of code and running &lt;code&gt;go run&lt;/code&gt; (even with its quirks) are great for the developer experience. This is the&#xA;main reason why I am using the language more frequently for scripts.&lt;/p&gt;&#xA;&lt;p&gt;Then we have the fast startup times. I am kind of sensitive to latency,&#xA;especially of command line utilities that need to answer fast when I expect&#xA;them to be fast (e.g.: &lt;code&gt;foo --help&lt;/code&gt;). This is one part where I could have&#xA;issues in Python, especially for more complex programs, but in Go it is rarely&#xA;an issue.&lt;/p&gt;&#xA;&lt;p&gt;Modules are also fantastic. It is not without its weirdness (like everything in&#xA;Go ecossystem), but the fact that it is so easy to add and manage dependencies&#xA;in a project using only the &lt;code&gt;go&lt;/code&gt; CLI is great. I also like that it generates a&#xA;hash of every dependency, making it reproducible (well, probably not at Nix&#xA;level, but still reproducible).&lt;/p&gt;&#xA;&lt;p&gt;Since I started to talk about &lt;code&gt;go&lt;/code&gt; CLI, what a great tool! The fact that you&#xA;can manage dependencies, generate documentation, format code, lint, run&#xA;tests/&lt;a href=&#34;https://blog.logrocket.com/benchmarking-golang-improve-function-performance/&#34;&gt;benchmarks&lt;/a&gt;/&lt;a href=&#34;https://go.dev/doc/security/fuzz/&#34;&gt;fuzzing&lt;/a&gt;,&#xA;check code for &lt;a href=&#34;https://go.dev/doc/articles/race_detector&#34;&gt;races&lt;/a&gt; etc., all&#xA;with just the &amp;quot;compiler&amp;quot; for the language is excelent. Still probably one of&#xA;the best developer experiences I know in any programming language.&lt;/p&gt;&#xA;&lt;p&gt;I will not even talk about the things that everyone talks about Go, like&#xA;&lt;a href=&#34;https://go.dev/doc/effective_go#goroutines&#34;&gt;goroutines&lt;/a&gt;, because I just don&#39;t&#xA;think I can add anything interesting to the topic.&lt;/p&gt;&#xA;&lt;p&gt;Now for the parts that I like less, the test part still quirks me that it is&#xA;not based in assertions, but thankfully it is easy to write assertions with&#xA;generics nowadays:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Equal&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;comparable&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;got&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;want&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Helper&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;got&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;want&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;got: %#v, want: %#v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;got&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;want&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GreaterOrEqual&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Ordered&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;actual&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;expected&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Helper&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;actual&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expected&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;got: %v; want: &amp;gt;=%v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;actual&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;expected&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// etc...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Just one of those things that I end up re-writing in every project. Yes, I know&#xA;about &lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;testify&lt;/a&gt; and other assertion&#xA;libraries, but quoting &lt;a href=&#34;https://www.youtube.com/watch?v=PAAkCSZUG1c&amp;amp;t=568s&#34;&gt;Rob&#xA;Pike&lt;/a&gt; here, &amp;quot;a little&#xA;copying is better than a little dependency&amp;quot;. As long the code you write is&#xA;trivial, it is better to duplicate the code than try to import a dependency.&lt;/p&gt;&#xA;&lt;p&gt;About another piece of code that generics allows me to write and I always end&#xA;up re-writing in every project is the &lt;code&gt;must*&lt;/code&gt; family of functions:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;must&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;must1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;must&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;must2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;T1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;T2&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;v1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v2&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;must&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// must3, must4, etc...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Those functions are so useful, especially for scripts where I generally don&#39;t&#xA;want to handle each error: if I have an error, I want the program to halt and&#xA;print a stack trace (exactly as I would have with a language with exceptions).&#xA;It basically allow me to convert code from:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;contents&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFile&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;contents&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;must1&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFile&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This brings Go closer to Python to me, and I think for scripts this is&#xA;something great.&lt;/p&gt;&#xA;&lt;p&gt;Finally, for the things that I hate, well the biggest one currently is the lack&#xA;of nullability (or in Go terms,&#xA;&lt;a href=&#34;https://github.com/golang/go/issues/49202&#34;&gt;nillability&lt;/a&gt;). After using&#xA;languages that has it, like Kotlin, or even something like&#xA;&lt;a href=&#34;https://www.mypy-lang.org/&#34;&gt;mypy&lt;/a&gt;, this is one of those things that completely&#xA;changes the developer experience. I also still don&#39;t like the error handling&#xA;(but &lt;code&gt;must*&lt;/code&gt; goes far by improving the situation, when it is possible to use&#xA;it), especially because it is easy to lose context on it:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// bad&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readFileContents&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;) ([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;contents&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFile&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contents&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// good&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readFileContents&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;) ([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;contents&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFile&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;readFileContents: error while reading a file: %w&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contents&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I also have some grips about the mutate everything approach of the language. I&#xA;prefer immutability by default, but I find that in general as long as you split&#xA;your functions at a reasonable size it is generally fine.&lt;/p&gt;&#xA;&lt;p&gt;And for a language that is supposed to be straightforward, it is strange on how&#xA;much magic the language relies on, in the form of things like &lt;a href=&#34;https://go.dev/doc/modules/layout&#34;&gt;&lt;code&gt;internal&lt;/code&gt; and&#xA;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt; packages, name capitalisation to&#xA;indicate visibility (&lt;code&gt;private&lt;/code&gt; vs &lt;code&gt;Public&lt;/code&gt;), conditional compiling by filenames&#xA;(e.g.: &lt;code&gt;foo_amd64.go&lt;/code&gt;, &lt;code&gt;bar_linux.go&lt;/code&gt;), magic comments (e.g.: &lt;code&gt;//go:build&lt;/code&gt;),&#xA;etc.&lt;/p&gt;&#xA;&lt;p&gt;I expect to write more Go code going forward. Not because it is the perfect&#xA;language or whatever, but just because it a is language that has some really&#xA;good qualities that makes the language attractive even with the issues that I&#xA;have. That makes it a reasonable good language, and at least for me this is&#xA;good enough.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-07-29/02-go-a-reasonable-good-language.md</guid>
      <pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Quick bits: why you should automate everything</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-07-29/01-quick-bits-why-you-should-automate-everything.md</link>
      <description>&lt;p&gt;If everything works as expected this blog post should appear in &lt;a href=&#34;https://kokada.capivaras.dev/&#34;&gt;in my&#xA;blog&lt;/a&gt; without I ever touching the&#xA;&lt;a href=&#34;https://capivavas.dev&#34;&gt;capivaras.dev&lt;/a&gt; website. I rewrote my &lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/2024-07-26/02-using-github-as-a-bad-blog-platform.md&#34;&gt;previous Python&#xA;script&lt;/a&gt; to Go&#xA;(&lt;a href=&#34;https://github.com/thiagokokada/blog/blob/3c39e0f7cd58b1af885f69871490b05bf6fc7d99/blog.go&#34;&gt;permalink&lt;/a&gt;)&#xA;since my attempt to generate proper description to the RSS feed resulted in&#xA;slow startup times (not because of Python, but because of my usage of&#xA;&lt;code&gt;nix-shell&lt;/code&gt; since I didn&#39;t want to deal with&#xA;&lt;a href=&#34;https://docs.python.org/3/library/venv.html&#34;&gt;venv&lt;/a&gt; or anything to manage my&#xA;Python dependencies).&lt;/p&gt;&#xA;&lt;p&gt;My previous workflow of this blog already involved me writing the texts in&#xA;&lt;a href=&#34;https://neovim.io/&#34;&gt;neovim&lt;/a&gt;, copying and pasting the result in the&#xA;&lt;a href=&#34;https://capivavas.dev&#34;&gt;capivaras.dev&lt;/a&gt; website and publishing. This was not&#xA;that bad, except that it seems I have a heavy tendency of editing my posts&#xA;multiple times. Copying and pasting data between neovim and the website became&#xA;tedious, so I decided to give up and automate the whole process.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://mataroa.blog/&#34;&gt;Mataroa&lt;/a&gt; (the blog platform&#xA;&lt;a href=&#34;https://capivavas.dev&#34;&gt;capivaras.dev&lt;/a&gt; run) has a reasonable good&#xA;&lt;a href=&#34;https://mataroa.blog/api/docs/&#34;&gt;API&lt;/a&gt;, and it only took a few hours to get a&#xA;version of publishing working (it would take less if&#xA;&lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt;, the framework Mataroa is written, did&#xA;not have a weird behavior with URLs missing a trailing &lt;code&gt;/&lt;/code&gt;). An additional few&#xA;lines of&#xA;&lt;a href=&#34;https://github.com/thiagokokada/blog/blob/51b20612335c7f4312a51a0f436235b4b701ce8b/.github/workflows/go.yml&#34;&gt;YAML&lt;/a&gt;&#xA;to make GitHub Actions trigger a pipeline and now I should never have to&#xA;manually update my blog again.&lt;/p&gt;&#xA;&lt;p&gt;I could have not done this. I mean, I probably wasted more time writing an&#xA;automation than I actually wasted publishing manually. But the manual process&#xA;is easy to miss, and I already did multiple mistakes publishing in the manual&#xA;method. For example, when writing the Markdown files, each post is written in a&#xA;particular format, where the first header is considered the title, so I need to&#xA;remove it from the contents during publication. But of course, this is easy to&#xA;miss, and I had to fix this multiple times already.&lt;/p&gt;&#xA;&lt;p&gt;So yes, I think this is a good lesson on why you should automate everything. It&#xA;is more than just about &lt;a href=&#34;https://xkcd.com/1205/&#34;&gt;time savings&lt;/a&gt;, it is about&#xA;reducing mistakes and even documenting (even if poorly) a process. I mean, the&#xA;code I wrote is not that great, but I can definitely rely on it in the future&#xA;to remember what I need to do. It will be much faster than trying to learn from&#xA;scratch again.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-07-29/01-quick-bits-why-you-should-automate-everything.md</guid>
      <pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Quick bits: nix-shell is cursed</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-07-27/01-quick-bits-nix-shell-is-cursed.md</link>
      <description>&lt;p&gt;The other day I had to run a PHP project in my machine. I have no idea how PHP&#xA;ecosystem work, I just wanted to get it to run.&lt;/p&gt;&#xA;&lt;p&gt;The easiest way to get a script to run if you use Nix is to use &lt;code&gt;nix-shell&lt;/code&gt;. As&#xA;many of you probably know, you can add &lt;code&gt;nix-shell&lt;/code&gt; as a shebang in your scripts&#xA;to run them as &lt;code&gt;./script&lt;/code&gt;. This was a PHP script so I wanted to do the same.&#xA;Easy right?&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/use/bin/env nix-shell&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!nix-shell -i php -p php83&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;strict_types&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./index.php&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fatal error: strict_types declaration must be the very first statement in the script in index.php on line 4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So it seems that &lt;code&gt;declare(strict_types=1)&lt;/code&gt; needs to be the first line in a PHP&#xA;script if used. I removed &lt;code&gt;declare(strict_types=1)&lt;/code&gt; and while the script works,&#xA;I don&#39;t have enough expertise in PHP to know if this would be safe or not.&lt;/p&gt;&#xA;&lt;p&gt;I decided to try something that initially looked really dumb:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/use/bin/env nix-shell&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;strict_types&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!nix-shell -i php -p php83&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./index.php&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Works&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wat? I mean, it is not dumb if it works, but this at least looks cursed.&lt;/p&gt;&#xA;&lt;p&gt;Eventually I found this&#xA;&lt;a href=&#34;https://github.com/NixOS/nix/issues/2570#issuecomment-446220517&#34;&gt;comment&lt;/a&gt; in a&#xA;Nix issue talking about cases where &lt;code&gt;nix-shell&lt;/code&gt; shebang doesn&#39;t work. It looks&#xA;like the classic case of a &lt;a href=&#34;https://github.com/NixOS/nix/issues/2570#issuecomment-446222206&#34;&gt;bug that becomes a&#xA;feature&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; after posting this in&#xA;&lt;a href=&#34;https://lobste.rs/s/gkcgza/quick_bits_nix_shell_is_cursed&#34;&gt;Lobte.rs&lt;/a&gt;, it seems&#xA;someone decided to open a &lt;a href=&#34;https://github.com/NixOS/nix/pull/11202&#34;&gt;Pull&#xA;Request&lt;/a&gt; to document this behavior.&#xA;Also the equivalent for the new &lt;a href=&#34;https://nix.dev/manual/nix/2.23/command-ref/new-cli/nix#shebang-interpreter&#34;&gt;nix&#xA;CLI&lt;/a&gt;&#xA;explicitly documents this behavior:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Note that the &lt;code&gt;#! nix&lt;/code&gt; lines don&#39;t need to follow after the first line, to&#xA;accomodate other interpreters.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-07-27/01-quick-bits-nix-shell-is-cursed.md</guid>
      <pubDate>Sat, 27 Jul 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Using GitHub as a (bad) blog platform</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-07-26/02-using-github-as-a-bad-blog-platform.md</link>
      <description>&lt;p&gt;I finally started a new blog, thanks to the offer of&#xA;&lt;a href=&#34;https://gluer.org/&#34;&gt;@ratsclub&lt;/a&gt; to give me free access to&#xA;&lt;a href=&#34;https://capivaras.dev/&#34;&gt;capivaras.dev&lt;/a&gt;. But considering how small this blog&#xA;platform is supposed to be, I want to have at least somewhere to have a backup&#xA;of my posts. I know &lt;a href=&#34;https://mataroa.blog/&#34;&gt;Mataroa&lt;/a&gt;, the blog platform that&#xA;&lt;a href=&#34;https://capivaras.dev/&#34;&gt;capivaras.dev&lt;/a&gt; runs, has automatic e-mail backups, but&#xA;I want something more reliable.&lt;/p&gt;&#xA;&lt;p&gt;I am writing all my posts in Markdown (the format that &lt;a href=&#34;https://1.mataroa.blog/guides/markdown/&#34;&gt;Mataroa&#xA;supports&lt;/a&gt;) files inside&#xA;&lt;a href=&#34;https://neovim.io/&#34;&gt;neovim&lt;/a&gt; anyway, so why not store all my Markdown files in&#xA;Git? So this is what I did, I now have an unofficial mirror in&#xA;&lt;a href=&#34;https://github.com/thiagokokada/blog&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;While I am here, why not overcomplicate? Can I make an usable blog platform&#xA;from GitHub? And by that I don&#39;t mean GitHub pages, the repository itself. I&#xA;mean, it already renders Markdown files by default, so no need to do anything&#xA;in that space. To reach feature parity with&#xA;&lt;a href=&#34;https://capivaras.dev/&#34;&gt;capivaras.dev&lt;/a&gt;, I only need to have an index and RSS&#xA;(since comments are not supported anyway). No need for newsletter since GitHub&#xA;has a &lt;a href=&#34;https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/viewing-your-subscriptions&#34;&gt;watch&#xA;feature&lt;/a&gt;&#xA;already.&lt;/p&gt;&#xA;&lt;p&gt;After a couple of hours hacking a Python script, you can see the result of this&#xA;monstrosity &lt;a href=&#34;https://github.com/thiagokokada/blog&#34;&gt;here&lt;/a&gt;. The script, called&#xA;&lt;code&gt;gen_blog.py&lt;/code&gt;, is available at the same repository (here is a&#xA;&lt;a href=&#34;https://github.com/thiagokokada/blog/blob/c8986d1ab1b94c0986fd814629bb8eb4034fb6e7/gen_blog.py&#34;&gt;permalink&lt;/a&gt;).&#xA;It automatically generates an index at&#xA;&lt;a href=&#34;https://github.com/thiagokokada/blog/blob/main/README.md&#34;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt; with&#xA;each blog post and a&#xA;&lt;a href=&#34;https://raw.githubusercontent.com/thiagokokada/blog/main/rss.xml&#34;&gt;&lt;code&gt;rss.xml&lt;/code&gt;&lt;/a&gt;&#xA;file at the root of the repository.&lt;/p&gt;&#xA;&lt;p&gt;Instead of trying to explain the code, I am going to explain the general idea,&#xA;because I think that if you want to replicate this idea it is better to rewrite&#xA;it in a way that you understand. It shouldn&#39;t take more than 2 hours in any&#xA;decent programming language. But if you really want, the script itself is&#xA;licensed in &lt;a href=&#34;https://en.wikipedia.org/wiki/WTFPL&#34;&gt;WTFPL&lt;/a&gt; license. The code only&#xA;uses Python 3&#39;s standard library and should work in any relatively recent&#xA;version (anything newer than 3.9 should work).&lt;/p&gt;&#xA;&lt;p&gt;So the idea is basically to organise the repository and the Markdown files in a&#xA;easy way that makes it trivial to parse in a deterministic way. For example, my&#xA;repository is organised in the following way:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── 2024-07-26&#xA;│   ├── 01-writing-nixos-tests-for-fun-and-profit.md&#xA;│   └── 02-using-github-as-a-bad-blog-platform.md &amp;lt;- this file&#xA;├── gen_blog.py&#xA;├── README.md&#xA;└── rss.xml&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Each day that you write a new blog post will be on its own directory. This is&#xA;nice because Markdown files may include extra files than the posts themselves,&#xA;e.g.: images, and this organisation make it trivial to organise everything.&lt;/p&gt;&#xA;&lt;p&gt;Each post has its own Markdown file. I put a two digit number before each post,&#xA;to ensure that when publishing multiple posts at the same day I keep them in&#xA;the same order of publishing. But if you don&#39;t care about it, you can just name&#xA;the files whatever you want.&lt;/p&gt;&#xA;&lt;p&gt;Also, I am assuming that each Markdown file has a header starting with &lt;code&gt;# &lt;/code&gt;,&#xA;and that is the title of the blog post.&lt;/p&gt;&#xA;&lt;p&gt;Using the above organisation, I have this function that scrapes the repository&#xA;and collect the necessary information to generate the index and RSS files:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;grab_posts&lt;/span&gt;(pwd: Path):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    posts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; defaultdict(list)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(pwd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterdir(), reverse&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Ignore non-directories or hidden files&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; dir&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_dir() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; dir&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Try to parse date from directory name&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strptime(dir&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%Y-%m-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WARN: ignoring non-date directory: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;dir&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stderr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Iterate between the files in the date directory&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; post &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(dir&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterdir(), reverse&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Ignore non-markdown files or hidden files (draft)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; post&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;suffix &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.md&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; post&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Grab the first H1 section to parse as title&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; post&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_text()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            mTitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;# (?P&amp;lt;title&amp;gt;.*)\r?\n&amp;#34;&lt;/span&gt;, text)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; mTitle &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (title &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; mTitle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupdict()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;)):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                posts[date]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: title, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;: str(post)})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WARN: did not find title for file: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;post&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stderr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; posts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some interesting tidbits: if a Markdown file has a &lt;code&gt;.&lt;/code&gt; at the start I assume it&#xA;is a draft post, and ignore it from my scraper. I added a bunch of &lt;code&gt;WARN&lt;/code&gt;&#xA;prints to make sure that the me in the future doesn&#39;t do anything dumb. Also,&#xA;sorting in reverse since reverse chronological order is the one most people&#xA;expect in blogs (i.e.: more recent blog posts at top).&lt;/p&gt;&#xA;&lt;p&gt;After running the function above, I have a resulting dictionary that I can use&#xA;to generate either a &lt;code&gt;README.md&lt;/code&gt; file or Markdown:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gen_readme&lt;/span&gt;(posts):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    titles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; date, dayPosts &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; posts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; post &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dayPosts:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# This creates a relative link to the Markdown file, .e.g.:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# ./02-using-github-as-a-bad-blog-platform.md&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;, post[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# This formats the title, e.g.:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# - [Using GitHub as a (bad) blog platform](./2024-07-26/02-using-github-as-a-bad-blog-platform.md) - 2024-07-26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; date&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;- [&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;post[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;](&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;link&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) - %Y-%m-%d&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# This appends to the list to generate the content later&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            titles&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(title)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# README_TEMPLATE is a string with the static part of the README&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(README_TEMPLATE&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(posts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(titles)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gen_rss&lt;/span&gt;(posts):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Got most of the specification from here:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# https://www.w3schools.com/XML/xml_rss.asp&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Element(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rss&amp;#34;&lt;/span&gt;, version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Here are the RSS metadata for the blog itself&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    channel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SubElement(rss, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;channel&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SubElement(channel, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kokada&amp;#39;s blog&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SubElement(channel, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/thiagokokada/blog&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SubElement(channel, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dd if=/dev/urandom of=/dev/brain0&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# You create one item for each blog post&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; date, dayPost &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; posts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; post &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dayPost:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SubElement(channel, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; urljoin(RSS_POST_LINK_PREFIX, post[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SubElement(item, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; post[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SubElement(item, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;guid&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; link&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SubElement(item, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; link&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SubElement(item, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pubDate&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; date&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%a&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; %b %Y %H:%M:%S GMT&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Generate the XML and indent&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ElementTree(rss)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indent(tree, space&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rss.xml&amp;#34;&lt;/span&gt;, xml_declaration&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To publish a new Post, a basically write a Markdown file, run `./gen_readme.py&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;README.md` at the root of the repository, and see the magic happen.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;It works much better than I initially anticipated. The &lt;code&gt;README.md&lt;/code&gt; is properly&#xA;populated with the titles and links. The RSS is kind of empty since it has no&#xA;description, but it seems to work fine (at least in&#xA;&lt;a href=&#34;https://www.inoreader.com/&#34;&gt;Inoreader&lt;/a&gt;, my RSS reader of choice). I can&#xA;probably fill the post description with more information if I really want, but&#xA;it is enough for now (update: it is working now, you just need to render the&#xA;Markdown as HTML and escape the tags;&#xA;&lt;a href=&#34;https://github.com/thiagokokada/blog/blob/9506051cc3d49f203304174b335ff62de9d17a05/gen_blog.py&#34;&gt;permalink&lt;/a&gt;&#xA;for the updated script). Not sure who is that interested in my writing that&#xA;will want to use this RSS feed instead the one available in&#xA;&lt;a href=&#34;https://kokada.capivaras.dev/rss/&#34;&gt;capivaras.dev&lt;/a&gt; anyway.&lt;/p&gt;&#xA;&lt;p&gt;Also, while I am using GitHub here, the same idea would work in GitLab, Gitea,&#xA;sr.ht or whatever. As long as your source hub supports Markdown files it should&#xA;work.&lt;/p&gt;&#xA;&lt;p&gt;So that is it. I am not saying this is a good idea for your primary blog&#xA;platform or whatever, and I still prefer to publish to a platform that doesn&#39;t&#xA;track users or have tons of JavaScript or whatever. But if you want a backup of&#xA;your posts and you are already writing Markdown anyway, well, there are worse&#xA;ways to do it I think.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; I rewrote the script again using Go&#xA;(&lt;a href=&#34;https://github.com/thiagokokada/blog/blob/3ece3853e7dd32977e7ec5238d2955e530ca4beb/blog.go&#34;&gt;permalink&lt;/a&gt;).&#xA;The reason for it is because when I started rendering Markdown (for&#xA;descriptions) the Python version got quite slow (not the fault of Python&#xA;itself, mostly because of the usage of &lt;code&gt;nix-shell&lt;/code&gt; to manage dependencies;&#xA;something that Go doesn&#39;t need). Took about half an hour, showing how easy it&#xA;is to do the same.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-07-26/02-using-github-as-a-bad-blog-platform.md</guid>
      <pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Writing NixOS tests for fun and profit</title>
      <link>https://github.com/thiagokokada/blog/blob/main/2024-07-26/01-writing-nixos-tests-for-fun-and-profit.md</link>
      <description>&lt;p&gt;I recently started a &lt;a href=&#34;https://github.com/thiagokokada/hyprland-go&#34;&gt;new side&#xA;project&lt;/a&gt; writing an IPC library in&#xA;Go for &lt;a href=&#34;https://hyprland.org/&#34;&gt;Hyprland&lt;/a&gt;, a Window Manager for Wayland.&lt;/p&gt;&#xA;&lt;p&gt;Once I got past the Work-in-Progress phase, I realise I had an issue: I wrote&#xA;some tests, but I was running then inside my system running Hyprland. And the&#xA;tests themselves were annoying: since they send commands to the current running&#xA;Hyprland instance, I was having programs being opened and settings being&#xA;changed, because this was the only way to have a reasonable good confidence&#xA;that what I was doing was correct. So I need to do like any good developer and&#xA;implement a CI, but how?&lt;/p&gt;&#xA;&lt;p&gt;One approach would be to create something like a mock client and test against&#xA;my mock. Since this mock wouldn&#39;t need a running Hyprland instance the tests&#xA;could run everywhere (even in non-Linux systems!), but they wouldn&#39;t be much&#xA;useful. Mocks are great for testing business logic, but not really for making&#xA;sure everything is working correctly.&lt;/p&gt;&#xA;&lt;p&gt;I need something more akin to an integration test, but this is tricky. It is&#xA;not like I am doing integration with e.g.: PostgreSQL that has thousands of&#xA;libraries available to make integration tests easier, I am doing integration&#xA;with a Window Manager that is a moving target with multiple breaking changes in&#xA;each release. And this is where NixOS tests enter, a way to run tests inside&#xA;Virtual Machines configured in Nix.&lt;/p&gt;&#xA;&lt;p&gt;I am a long time NixOS user and commiter, but I never wrote a NixOS test&#xA;outside of &lt;a href=&#34;https://github.com/NixOS/nixpkgs&#34;&gt;nixpkgs&lt;/a&gt; itself. However I knew&#xA;it was possible, and after doing a quick reading of the &lt;a href=&#34;https://wiki.nixos.org/wiki/NixOS_VM_tests&#34;&gt;Wiki&#xA;entry&lt;/a&gt; about it, I was ready to&#xA;start.&lt;/p&gt;&#xA;&lt;p&gt;The first part is to call &lt;code&gt;pkgs.testers.runNixOSTest&lt;/code&gt; and configure the machine&#xA;as any other NixOS system, e.g.:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ pkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;testers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;runNixOSTest {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hyprland-go&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;machine &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { config&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; lib&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# bootloader related configuration&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      boot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;systemd-boot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      boot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;efi&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;canTouchEfiVariables &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# enable hyprland&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hyprland&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# create a user called alice&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      users&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;alice &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        isNormalUser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# add some extra packages that we need during tests&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      environment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;systemPackages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [ go kitty ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# auto login as alice&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      services&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;autologinUser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alice&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# configure VM, increase memory and CPU and enable OpenGL via LLVMPipe&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      virtualisation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;qemu &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-smp 2&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-m 4G&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-vga none&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-device virtio-gpu-pci&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Start hyprland at login&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loginShellInit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hyprland&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  testScript &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start_all()&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A few details that I want to bring to attention. The first one is how easy it&#xA;is to setup things like a normal user account, add some extra packages we need&#xA;for testing, add Hyprland itself and configure auto-login. I have no idea how&#xA;painful it would be to automatise all those steps in e.g.: Ansible, but here we&#xA;are in a few lines of Nix code. This is, of course, thanks to all the&#xA;contributors to nixpkgs that implement something that help their own use case,&#xA;but once combined make it greater than the sum of the parts.&lt;/p&gt;&#xA;&lt;p&gt;Second is something that I took a while to figure out: how to enable GPU&#xA;acceleration inside the VM. You see, Hyprland, different from other Window&#xA;Managers, requires OpenGL support. This is basically why the flag &lt;code&gt;-device virtio-gpu-pci&lt;/code&gt; is in &lt;code&gt;virtualisation.qemu.options&lt;/code&gt;, this enables OpenGL&#xA;rendering via LLVMPipe, that while being slow since it is rendered in CPU, is&#xA;sufficient for this case.&lt;/p&gt;&#xA;&lt;p&gt;Putting the above code inside a&#xA;&lt;a href=&#34;https://wiki.nixos.org/wiki/Flakes&#34;&gt;&lt;code&gt;flake.nix&lt;/code&gt;&lt;/a&gt; for reproducibility, I had&#xA;something similar to:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hyprland&amp;#39;s IPC bindings for Go&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:NixOS/nixpkgs/nixos-unstable&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      checks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x86_64-linux &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nixpkgs { system &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64-linux&amp;#34;&lt;/span&gt;; };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          testVm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;testers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;runNixOSTest {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# the code above&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I can now run &lt;code&gt;nix build .#checks.x86_64-linux.testVm -L&lt;/code&gt; to build and run the&#xA;VM. However it is not really useful right now, since we didn&#39;t add any useful&#xA;code in &lt;code&gt;testScript&lt;/code&gt;, the core of the NixOS test framework. We can also run&#xA;&lt;code&gt;nix build .#checks.x86_64-linux.testVm.driverInteractive&lt;/code&gt; and&#xA;&lt;code&gt;./result/bin/nixos-test-driver&lt;/code&gt;: this will start a Python console where we can&#xA;manually play with the VM (try typing &lt;code&gt;start_all()&lt;/code&gt; for example).&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;testScript&lt;/code&gt; is a sequence of Python statements that perform various&#xA;actions, such as starting VMs, executing commands in the VMs, and so on. More&#xA;about it in the official&#xA;&lt;a href=&#34;https://nixos.org/manual/nixos/stable/index.html#sec-nixos-tests&#34;&gt;documentation&lt;/a&gt;.&#xA;For our case we can start with something like this:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    testScript &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* python */&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      start_all()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      machine.wait_for_unit(&amp;#34;multi-user.target&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      machine.wait_for_file(&amp;#34;/home/alice/test-finished&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#39;&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first statement, &lt;code&gt;start_all()&lt;/code&gt;, starts all VMs, in this case we have only&#xA;one, called &lt;code&gt;machine&lt;/code&gt;. We send two further commands to &lt;code&gt;machine&lt;/code&gt;:&#xA;&lt;code&gt;wait_for_unit(&amp;quot;multi-user.target&amp;quot;)&lt;/code&gt; and&#xA;&lt;code&gt;wait_for_file(&amp;quot;/home/alice/test-finished&amp;quot;)&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The first command waits until systemd&#39;s &lt;code&gt;multi-user.target&lt;/code&gt; is ready, a good&#xA;way to ensure that the system is ready for further commands. The second one we&#xA;wait for a file called &lt;code&gt;test-finished&lt;/code&gt; to appear in Alice&#39;s &lt;code&gt;$HOME&lt;/code&gt; (basically,&#xA;a canary), but how can we generate this file?&lt;/p&gt;&#xA;&lt;p&gt;Remember that we added &lt;code&gt;programs.bash.loginShellInit = &amp;quot;Hyprland&amp;quot;&lt;/code&gt;, that&#xA;automatically starts Hyprland when Alice logs in. We need to modify that&#xA;command to run the Go tests from our library. The good thing is that Hyprland&#xA;configuration file supports a&#xA;&lt;a href=&#34;https://wiki.hyprland.org/Configuring/Keywords/#executing&#34;&gt;&lt;code&gt;exec-once&lt;/code&gt;&lt;/a&gt;&#xA;command that runs a command during Hyprland launch. We can abuse this to launch&#xA;a terminal emulator and run our tests:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  programs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loginShellInit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      testScript &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writeShellScript &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hyprland-go-test&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        set -euo pipefail&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        trap &amp;#39;echo $? &amp;gt; $HOME/test-finished&amp;#39; EXIT # creates the canary when the script finishes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        cd &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;./.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; # go to the library directory&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        go test -v ./... &amp;gt; $HOME/test.log 2&amp;gt;&amp;amp;1 # run Go tests&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;#39;&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      hyprlandConf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writeText &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hyprland.conf&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        exec-once = kitty sh -c &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;testScript&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;#39;&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      Hyprland --config &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;hyprlandConf&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#39;&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we are basically creating a custom Hyprland config that starts a&#xA;&lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;Kitty&lt;/a&gt; terminal emulator, that then launches&#xA;a shell script that runs the test. Since we have no way to get the results of&#xA;the test, we pipe the output to a file that we can collect later (e.g.:&#xA;&lt;code&gt;machine.succeded(&amp;quot;cat /home/alice/test.log&amp;quot;)&lt;/code&gt;). And once the script exit, we&#xA;create the canary file &lt;code&gt;$HOME/test-finished&lt;/code&gt;, that allows the &lt;code&gt;testScript&lt;/code&gt;&#xA;knows that the test finished and it can destroy the VM safely.&lt;/p&gt;&#xA;&lt;p&gt;If you want to take a look at the final result, it is&#xA;&lt;a href=&#34;https://github.com/thiagokokada/hyprland-go/blob/v0.0.1/flake.nix&#34;&gt;here&lt;/a&gt;. This&#xA;tests run in any Linux machine that supports KVM, and also works in &lt;a href=&#34;https://github.com/thiagokokada/hyprland-go/actions/workflows/nix.yaml&#34;&gt;GitHub&#xA;Actions&lt;/a&gt;&#xA;thanks to the the&#xA;&lt;a href=&#34;https://github.com/DeterminateSystems/nix-installer-action&#34;&gt;nix-installer-action&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;And now I have a proper CI pipeline in a way that I never imagined would be&#xA;possible, especially considering how simple it was.&lt;/p&gt;&#xA;</description>
      <guid>https://github.com/thiagokokada/blog/blob/main/2024-07-26/01-writing-nixos-tests-for-fun-and-profit.md</guid>
      <pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>